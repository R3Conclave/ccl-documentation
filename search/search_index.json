{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started with Conclave Cloud Welcome to Conclave Cloud - the serverless platform that preserves privacy. This site will provide you with all the information you need to get started in understanding what Conclave Cloud is and what it can do. It will also give you information on how to create your first Conclave Function, through to developing a simple password manager as an example. Sign-up for access to Conclave Cloud The first thing to do if you haven't already is to sign-up and create yourself an account on Conclave Cloud. You can sign up at the Conclave Cloud portal landing page . Click on 'Start for Free' then enter your details to register. Once you have signed up, you can login to the Conclave Cloud portal. What next? From here you need to create yourself a project and then upload one or more functions to play with. Use the resources below to guide you through using the platform. Resources The following pages will tell you more about Conclave Cloud as well as giving examples on how to write and invoke functions. Page Description What is Conclave Cloud? An overview of the Conclave Cloud platform, what it is and what it can do. Conclave Cloud Concepts What is a project? What is a function? Your questions answered here. Creating your first function Dive into writing your first JavaScript function, uploading it to the platform and invoking it. JavaScript in Conclave Functions Writing JavaScript for Conclave Functions is not quite the same as for other platforms such as node. Find more out about it here. The ConclavePass Sample See a more in-depth example which shows how to use TypeScript in Conclave Functions as well as use the Java and JavaScript clients. You can interact with Conclave Cloud using the Conclave Cloud Command Line Interface ( ccl ) as well as client SDKs for Java/Kotlin and JavaScript. These tools and SDKs can be obtained using the information in the table below: Tool/SDK Description Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Command Line tool for Windows The ccl tool can be used from the Windows command prompt to manage your Conclave Cloud projects and services. Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Installing the ccl tool Whichever operating system you are using you will need to ensure you have a Java 11 or greater runtime environment installed in order to be able to run the ccl tool. Linux: Download the tool using the link above. Copy the tool into a directory that is on your path (such as ~/bin ) or add the directory containing the tool to your PATH environment variable. Test it by executing ccl . macOS: 1. Download the tool using the link above. 2. Copy the tool into a directory that is on your path or add the directory containing the tool to your PATH environment variable. 3. Test it by executing ccl . Windows: 1. Download the tool zipfile using the link above. 2. Unzip the contents to the folder of your choice. 3. Open the start menu and type \"env\" then choose \"Edit the system environment variables\". 4. Click the \"Environment Variables\" button. 5. Find the \"Path\" entry, edit it and add the folder containing the tool to the path value. 6. Restart your command prompt to ensure the path has been updated. Note that for Windows, whenever you are asked to type ccl you need to replace it with ccl.bat . Installing the Conclave Cloud JavaScript Client SDK For the beta version of Conclave Cloud, the JavaScript Client SDK is delivered in a zip file that contains an npm compatible component that can be imported into your JavaScript/TypeScript application by setting it as a dependency in your project. Download and unzip the SDK to the directory of your choice. To add it as a dependency, add the following to your package.json , making sure to provide the correct path to where you unzipped the SDK. \"dependencies\": { ... \"conclave-cloud-sdk\": \"file:path/to/conclave-cloud-sdk-js\", ... } Installing the Conclave Cloud Java/Kotlin Client SDK For the beta version of Conclave Cloud, the Java/Kotlin Client SDK is delivered in a zip file that contains a file-based maven repository. This can be added as a dependency in your Java/Kotlin project by adding the repository then describing the dependency. Download and unzip the SDK to the directory of your choice. Add the repository to your build.gradle.kts , making sure to provide the correct path to where you unzipped the SDK. repositories { maven(url = \"path/to/conclave-cloud-sdk/repo\") mavenCentral() } Then add the SDK as a dependency: // Conclave Cloud implementation(\"com.r3.conclave.cloud:conclave-cloud-sdk:1.0-RC1\")","title":"Getting Started"},{"location":"#getting-started-with-conclave-cloud","text":"Welcome to Conclave Cloud - the serverless platform that preserves privacy. This site will provide you with all the information you need to get started in understanding what Conclave Cloud is and what it can do. It will also give you information on how to create your first Conclave Function, through to developing a simple password manager as an example.","title":"Getting Started with Conclave Cloud"},{"location":"#sign-up-for-access-to-conclave-cloud","text":"The first thing to do if you haven't already is to sign-up and create yourself an account on Conclave Cloud. You can sign up at the Conclave Cloud portal landing page . Click on 'Start for Free' then enter your details to register. Once you have signed up, you can login to the Conclave Cloud portal.","title":"Sign-up for access to Conclave Cloud"},{"location":"#what-next","text":"From here you need to create yourself a project and then upload one or more functions to play with. Use the resources below to guide you through using the platform.","title":"What next?"},{"location":"#resources","text":"The following pages will tell you more about Conclave Cloud as well as giving examples on how to write and invoke functions. Page Description What is Conclave Cloud? An overview of the Conclave Cloud platform, what it is and what it can do. Conclave Cloud Concepts What is a project? What is a function? Your questions answered here. Creating your first function Dive into writing your first JavaScript function, uploading it to the platform and invoking it. JavaScript in Conclave Functions Writing JavaScript for Conclave Functions is not quite the same as for other platforms such as node. Find more out about it here. The ConclavePass Sample See a more in-depth example which shows how to use TypeScript in Conclave Functions as well as use the Java and JavaScript clients. You can interact with Conclave Cloud using the Conclave Cloud Command Line Interface ( ccl ) as well as client SDKs for Java/Kotlin and JavaScript. These tools and SDKs can be obtained using the information in the table below: Tool/SDK Description Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Command Line tool for Windows The ccl tool can be used from the Windows command prompt to manage your Conclave Cloud projects and services. Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications.","title":"Resources"},{"location":"#installing-the-ccl-tool","text":"Whichever operating system you are using you will need to ensure you have a Java 11 or greater runtime environment installed in order to be able to run the ccl tool. Linux: Download the tool using the link above. Copy the tool into a directory that is on your path (such as ~/bin ) or add the directory containing the tool to your PATH environment variable. Test it by executing ccl . macOS: 1. Download the tool using the link above. 2. Copy the tool into a directory that is on your path or add the directory containing the tool to your PATH environment variable. 3. Test it by executing ccl . Windows: 1. Download the tool zipfile using the link above. 2. Unzip the contents to the folder of your choice. 3. Open the start menu and type \"env\" then choose \"Edit the system environment variables\". 4. Click the \"Environment Variables\" button. 5. Find the \"Path\" entry, edit it and add the folder containing the tool to the path value. 6. Restart your command prompt to ensure the path has been updated. Note that for Windows, whenever you are asked to type ccl you need to replace it with ccl.bat .","title":"Installing the ccl tool"},{"location":"#installing-the-conclave-cloud-javascript-client-sdk","text":"For the beta version of Conclave Cloud, the JavaScript Client SDK is delivered in a zip file that contains an npm compatible component that can be imported into your JavaScript/TypeScript application by setting it as a dependency in your project. Download and unzip the SDK to the directory of your choice. To add it as a dependency, add the following to your package.json , making sure to provide the correct path to where you unzipped the SDK. \"dependencies\": { ... \"conclave-cloud-sdk\": \"file:path/to/conclave-cloud-sdk-js\", ... }","title":"Installing the Conclave Cloud JavaScript Client SDK"},{"location":"#installing-the-conclave-cloud-javakotlin-client-sdk","text":"For the beta version of Conclave Cloud, the Java/Kotlin Client SDK is delivered in a zip file that contains a file-based maven repository. This can be added as a dependency in your Java/Kotlin project by adding the repository then describing the dependency. Download and unzip the SDK to the directory of your choice. Add the repository to your build.gradle.kts , making sure to provide the correct path to where you unzipped the SDK. repositories { maven(url = \"path/to/conclave-cloud-sdk/repo\") mavenCentral() } Then add the SDK as a dependency: // Conclave Cloud implementation(\"com.r3.conclave.cloud:conclave-cloud-sdk:1.0-RC1\")","title":"Installing the Conclave Cloud Java/Kotlin Client SDK"},{"location":"conclave-cloud-concepts/","text":"Conclave Cloud Concepts In order to get started with Conclave Cloud, you need to understand some of the key concepts you will be presented with in the portal and the CLI. Let's start by defining those two: Conclave Cloud Portal The portal provides you the tools to manage your Conclave Cloud account and projects in a nice web-based interface. When you first log in you are presented with a list of existing projects and given the opportunity to create a new project. The definition of a project is below. Within a project you can check to see which functions you have deployed, how many times they've been called plus lots of other information and metrics about the platform. If this is your first time in here, create yourself a project and go and explore! Conclave Cloud Command Line Tool The \"Conclave Cloud Command Line Tool\" is known as ccl for short, as this is the command you enter to invoke it in the terminal or command prompt. The ccl tool provides all the management options available in the portal, but on top of this it allows you to upload and invoke functions without writing any client code. This is great for testing out your functions or trying out the Conclave Cloud platform. Enter ccl in your terminal or command prompt to see what commands are available. There is help available for each command too. For example, this will give you help for the functions command. ccl functions --help Projects A Conclave Cloud project is a specific configuration of the Conclave Cloud services. At the moment, because Conclave Cloud only provides the Functions service, a project contains a particular set of uploaded functions and shows usage and log data for just those functions. You can think of a project as an individual application or service. For example, you may have a project for 'Password Manager', or for a larger application you may have projects named 'Project X Payment Processor' and 'Project X User Data'. When experimenting with the platform, just create yourself a project named 'Test' or whatever you like. You can always delete it when you're finished. Functions Each project will allow the configuration of a set of functions for invoking using the Conclave Functions service. But what is a function? A function is a JavaScript code module that exports an entry point. The combination of this code plus the entry point name is uploaded and defines a single 'function' within the Conclave Functions service. You can upload as many functions as you want to, each obviously designed to perform a different task. You might find it more convenient to create an npm package and configure it using a tool such as webpack to assemble multiple files or even languages into a single JavaScript file for uploading to functions. In fact, you can even define multiple exported functions from the JavaScript module, then upload the same file multiple times but changing the entry point each time to create multiple functions. This is the approach used by the Conclave Cloud Password sample, so go and take a look at the source code for an example. Tenant ID and Project ID When you first open a project in the portal, you will be presented with two long values named Tenant ID and Project ID . The Tenant ID is the unique code that identifies your account. The Project ID is the unique identifier for the current project. Don't worry, these values are not a secret. You will need to provide these to the client SDK when you are writing you applications that use Conclave Cloud to tell it which set of functions to use. Function hashes You may see reference to function hashes in ccl or elsewhere in the documentation. These are a really important concept within Conclave Functions but much of the complexity is hidden from you. Whenever you upload a function to Conclave Functions, ccl will calculate the SHA256 has of the JavaScript code with the name of the entry point concatenated to the end. If the code or entry point is changed then the hash will change. Whenever an end user wants to invoke a function, they specify the hash of the code and entry point of the function that they expect to be processing their data. Once the Conclave Functions enclave receives the request, it will check the expected hash against the actual hash as calculated inside the enclave and will reject the invocation request if they do not match. This ensures the user is in full-control of what code can access their data. When using ccl , the tool will automatically use the previously calculated hash. This is not the most secure way to execute a function because if the hash changes, the ccl calculation will automatically update and call the function anyway. To counter this, you can manually provide a hash via the command line. When using the JavaScript or Java/Kotlin SDKs, you always need to provide the expected hash when invoking a function.","title":"Conclave Cloud Concepts"},{"location":"conclave-cloud-concepts/#conclave-cloud-concepts","text":"In order to get started with Conclave Cloud, you need to understand some of the key concepts you will be presented with in the portal and the CLI. Let's start by defining those two:","title":"Conclave Cloud Concepts"},{"location":"conclave-cloud-concepts/#conclave-cloud-portal","text":"The portal provides you the tools to manage your Conclave Cloud account and projects in a nice web-based interface. When you first log in you are presented with a list of existing projects and given the opportunity to create a new project. The definition of a project is below. Within a project you can check to see which functions you have deployed, how many times they've been called plus lots of other information and metrics about the platform. If this is your first time in here, create yourself a project and go and explore!","title":"Conclave Cloud Portal"},{"location":"conclave-cloud-concepts/#conclave-cloud-command-line-tool","text":"The \"Conclave Cloud Command Line Tool\" is known as ccl for short, as this is the command you enter to invoke it in the terminal or command prompt. The ccl tool provides all the management options available in the portal, but on top of this it allows you to upload and invoke functions without writing any client code. This is great for testing out your functions or trying out the Conclave Cloud platform. Enter ccl in your terminal or command prompt to see what commands are available. There is help available for each command too. For example, this will give you help for the functions command. ccl functions --help","title":"Conclave Cloud Command Line Tool"},{"location":"conclave-cloud-concepts/#projects","text":"A Conclave Cloud project is a specific configuration of the Conclave Cloud services. At the moment, because Conclave Cloud only provides the Functions service, a project contains a particular set of uploaded functions and shows usage and log data for just those functions. You can think of a project as an individual application or service. For example, you may have a project for 'Password Manager', or for a larger application you may have projects named 'Project X Payment Processor' and 'Project X User Data'. When experimenting with the platform, just create yourself a project named 'Test' or whatever you like. You can always delete it when you're finished.","title":"Projects"},{"location":"conclave-cloud-concepts/#functions","text":"Each project will allow the configuration of a set of functions for invoking using the Conclave Functions service. But what is a function? A function is a JavaScript code module that exports an entry point. The combination of this code plus the entry point name is uploaded and defines a single 'function' within the Conclave Functions service. You can upload as many functions as you want to, each obviously designed to perform a different task. You might find it more convenient to create an npm package and configure it using a tool such as webpack to assemble multiple files or even languages into a single JavaScript file for uploading to functions. In fact, you can even define multiple exported functions from the JavaScript module, then upload the same file multiple times but changing the entry point each time to create multiple functions. This is the approach used by the Conclave Cloud Password sample, so go and take a look at the source code for an example.","title":"Functions"},{"location":"conclave-cloud-concepts/#tenant-id-and-project-id","text":"When you first open a project in the portal, you will be presented with two long values named Tenant ID and Project ID . The Tenant ID is the unique code that identifies your account. The Project ID is the unique identifier for the current project. Don't worry, these values are not a secret. You will need to provide these to the client SDK when you are writing you applications that use Conclave Cloud to tell it which set of functions to use.","title":"Tenant ID and Project ID"},{"location":"conclave-cloud-concepts/#function-hashes","text":"You may see reference to function hashes in ccl or elsewhere in the documentation. These are a really important concept within Conclave Functions but much of the complexity is hidden from you. Whenever you upload a function to Conclave Functions, ccl will calculate the SHA256 has of the JavaScript code with the name of the entry point concatenated to the end. If the code or entry point is changed then the hash will change. Whenever an end user wants to invoke a function, they specify the hash of the code and entry point of the function that they expect to be processing their data. Once the Conclave Functions enclave receives the request, it will check the expected hash against the actual hash as calculated inside the enclave and will reject the invocation request if they do not match. This ensures the user is in full-control of what code can access their data. When using ccl , the tool will automatically use the previously calculated hash. This is not the most secure way to execute a function because if the hash changes, the ccl calculation will automatically update and call the function anyway. To counter this, you can manually provide a hash via the command line. When using the JavaScript or Java/Kotlin SDKs, you always need to provide the expected hash when invoking a function.","title":"Function hashes"},{"location":"conclavepass-sample/","text":"Conclave Pass - Password Manager implemented using Conclave Cloud Github: https://github.com/R3Conclave/ccl-sample-conclavepass This documentation is a duplicate of the README.md in that repository. Sample description This Conclave Pass repository contains a set of projects that together implement a basic password manager service that demonstrates how to use Conclave Cloud services to provide a privacy preserving backend to an application. The end user can interact with the password manager service using both a web-based frontend implemented with Angular, and a command-line tool written in Kotlin. How do existing password managers work? Password managers maintain a database of password entries that are all protected by a single master password or access key. It goes without saying that the password database contains extremely sensitive information that the user wants to keep private. It is important that even the password manager service administrators are not able to access entries within the database. Password managers normally solve this privacy problem by storing the database using at-rest encryption in a database in the cloud. When the user wants to access the database on a new device, the cloud copy of the database is synchronised to the device in its entirety. All operations on the database are then performed in the client application or web browser. For example, the architecture used by LastPass is described here: https://www.lastpass.com/security/zero-knowledge-security. This approach is obviously very secure but comes with some limitations: If the database grows to a large size then it may take significant network bandwidth/storage on the endpoint device. There is no opportunity for sharing or collaboration on database entries. Now, in reality, for password managers these are not real limitations, but for the purposes of this demonstration project we can see that a Conclave Cloud based implementation can be used to solve these two issues by accessing the database inside an SGX enclave in the cloud. How is ConclavePass architected? A diagram showing the architecture of the project is shown below. Each component in the diagram is named corresponding to the directories in this repository that contain the implementation for the component. Each component is described below: Functions The functions consist of a typescript component that provides methods that can be used to add, query, get and remove entries within the user's database. This requires access to the unencrypted database and therefore, to ensure privacy, runtime encryption is used by hosting the functions within Conclave Cloud in the Conclave Functions service. Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary in order to persist the user databases. The functions component uses the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is vitally important to ensure that any data exchanged via fetch() is encrypted as the request is made outside the Conclave Functions Intel SGX enclave. The functions module uses another built-in function, crypto.getProjectKey() to get a key that is unique to the project and function code and uses this to encrypt/decrypt the user's database prior to exchanging it with the external storage. Backend The backend service is used to store and retrieve the encrypted database for each user. It only ever handles data that has been encrypted using a key that can only be accessed within the functions component, ensuring that no unauthorised entity can gain access to the user databases. The simple implementation provided within this project consists of a Spring application that stores the databases in a key/value map in memory. All entries are lost if the service is restarted. Frontend The frontend provides a web-browser application that allows login/logout and management of user keys. This has been implemented using the Angular framework and demonstrates how the Conclave Cloud JavaScript SDK can be used to interact with Conclave Functions. Cli The CLI is a terminal-based tool written in Kotlin that allows login/logout and management of user keys. This demonstrates how the Conclave Cloud Kotlin/Java SDK can be used to interact with Conclave Functions. How is privacy preserved? With the ConclavePass solution, the only component that has access to the user databases in an unencrypted form is the function code that runs within the Conclave Functions service. But how do we ensure that is the case? Conclave Cloud makes it easy to ensure that only authorised function code can access data. It does this by running the code within an Intel SGX enclave and providing an attestation that proves the validity of the platform as well as the integrity and authenticity of the code running inside the enclave. The details of this whole process are handled by the Conclave Cloud platform and the client SDKs. Let's take a look first at how a user sends a password to the service. The frontend or CLI will call the addEntry function, passing the user's password and details of the new password entry. This information obviously should not be sent unencrypted. Furthermore it should be encrypted using a key that is only accessible to the set of functions that have been approved by the user to handle the user's database. The Conclave Cloud client SDK obtains a public key from the platform that is signed by a report that proves the private key can only be accessed within an approved Conclave Functions enclave. The client SDK validates the report and ensures the key signature does indeed match the signature in the report. Once this key has been established we can encrypt data using this key safe in the knowledge that only a valid Conclave Functions enclave can decrypt it. The password entry is encrypted using this key and the addEntry function invoked. This is then picked up inside a Conclave Functions enclave which can decrypt the parameters using the private key that only it has access to. The function retrieves the encrypted user database from the external service. Once the function has the user's encrypted database it then decrypts it. The key used to encrypt/decrypt the enclave is derived from a number of sources, all of which need to be present to obtain the correct key: The Project key - this is the same key that is used to decrypt the function code itself and the invocation parameters that were provided to the function. The hash of the code that is executing. By mixing this into the encryption key we can assure that if the code is modified or changed then it cannot access the database. The user's password - by mixing this in we can assure one user cannot access the database for another user. The function decrypts the database, adds the new entry, re-encrypts it then sends it back to the backend. So, we can see that the only entity that has access to all the secrets required to access each user's database entry is Conclave Functions, and only then when running the exact same code that the user expects the functions to be running, and when provided with the user's password. Building and deploying the demonstration Each component must be built and deployed or hosted in order to run the demonstration. 1. Backend The backend service needs to be available as a fixed IP on the internet in order to allow Conclave Functions to access it for storing user databases. It is recommended to set up a new virtual machine with your cloud service provider to host this. The resource requirements are tiny so you can use the smallest size of virtual machine your cloud service provider provides. The service is built using this command: ./gradlew build You can then deploy the build/libs/conclavepass-0.0.1-SNAPSHOT.jar file to your virtual machine and run it with: java -jar ./conclavepass-0.0.1-SNAPSHOT.jar 2. Functions Note down the IP address for the backend service that you have just deployed and update the functions module to connect to the service with that address in functions/src/index.ts . Then see the instructions in functions/README.md for information on how to setup a Conclave Cloud project and build and deploy the functions ready for use. 3. Frontend The Conclave Cloud JavaScript client SDK is not yet hosted in a public repository so you will need to download and unzip it locally and update the frontend project to use your local copy. Instructions on how to do this and build and run the frontend can be found in frontend/README.md . Once the frontend is running you can access it at http://localhost:4200. 4. CLI The Conclave Cloud Java client SDK is not yet hosted in a public repository so you will need to download and unzip it locally and update the CLI project to use your local copy. Instructions on how to do this and build and run the CLI can be found in frontend/README.md . Usage notes This is only a demo of a password manager. As such, it provides only very basic functionality and error handling. There are a few things to note when trying the demonstration. The username is used as the user token When you enter your username, the name is run through a SHA256 hashing algorithm and converted to a hex string. This is used as the token for the user. The backend service stores and retrieves encrypted databases using this token. The password is set on first access The first time a user token is used, there is no entry within the backend service so it returns an empty string. The functions component assumes this is a new user and creates an empty database encrypted with the current password. All subsequent access must use the same password, and the password cannot be changed. Incorrect passwords are not handled well When an incorrect password is used, the decrypt function returns invalid data within the functions component. This is not checked and the JavaScript code subsequently fails. This obviously serves the purpose of protecting the database but is not a good user experience. This is something that can be improved in the demonstration code - maybe an exercise for the reader! The database is not persisted As mentioned above, restarting the backend service clears all user data. This is useful for demonstration purposes but does not make for a very useful password manager!","title":"ConclavePass Sample using Conclave Functions"},{"location":"conclavepass-sample/#conclave-pass-password-manager-implemented-using-conclave-cloud","text":"Github: https://github.com/R3Conclave/ccl-sample-conclavepass This documentation is a duplicate of the README.md in that repository.","title":"Conclave Pass - Password Manager implemented using Conclave Cloud"},{"location":"conclavepass-sample/#sample-description","text":"This Conclave Pass repository contains a set of projects that together implement a basic password manager service that demonstrates how to use Conclave Cloud services to provide a privacy preserving backend to an application. The end user can interact with the password manager service using both a web-based frontend implemented with Angular, and a command-line tool written in Kotlin.","title":"Sample description"},{"location":"conclavepass-sample/#how-do-existing-password-managers-work","text":"Password managers maintain a database of password entries that are all protected by a single master password or access key. It goes without saying that the password database contains extremely sensitive information that the user wants to keep private. It is important that even the password manager service administrators are not able to access entries within the database. Password managers normally solve this privacy problem by storing the database using at-rest encryption in a database in the cloud. When the user wants to access the database on a new device, the cloud copy of the database is synchronised to the device in its entirety. All operations on the database are then performed in the client application or web browser. For example, the architecture used by LastPass is described here: https://www.lastpass.com/security/zero-knowledge-security. This approach is obviously very secure but comes with some limitations: If the database grows to a large size then it may take significant network bandwidth/storage on the endpoint device. There is no opportunity for sharing or collaboration on database entries. Now, in reality, for password managers these are not real limitations, but for the purposes of this demonstration project we can see that a Conclave Cloud based implementation can be used to solve these two issues by accessing the database inside an SGX enclave in the cloud.","title":"How do existing password managers work?"},{"location":"conclavepass-sample/#how-is-conclavepass-architected","text":"A diagram showing the architecture of the project is shown below. Each component in the diagram is named corresponding to the directories in this repository that contain the implementation for the component. Each component is described below:","title":"How is ConclavePass architected?"},{"location":"conclavepass-sample/#functions","text":"The functions consist of a typescript component that provides methods that can be used to add, query, get and remove entries within the user's database. This requires access to the unencrypted database and therefore, to ensure privacy, runtime encryption is used by hosting the functions within Conclave Cloud in the Conclave Functions service. Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary in order to persist the user databases. The functions component uses the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is vitally important to ensure that any data exchanged via fetch() is encrypted as the request is made outside the Conclave Functions Intel SGX enclave. The functions module uses another built-in function, crypto.getProjectKey() to get a key that is unique to the project and function code and uses this to encrypt/decrypt the user's database prior to exchanging it with the external storage.","title":"Functions"},{"location":"conclavepass-sample/#backend","text":"The backend service is used to store and retrieve the encrypted database for each user. It only ever handles data that has been encrypted using a key that can only be accessed within the functions component, ensuring that no unauthorised entity can gain access to the user databases. The simple implementation provided within this project consists of a Spring application that stores the databases in a key/value map in memory. All entries are lost if the service is restarted.","title":"Backend"},{"location":"conclavepass-sample/#frontend","text":"The frontend provides a web-browser application that allows login/logout and management of user keys. This has been implemented using the Angular framework and demonstrates how the Conclave Cloud JavaScript SDK can be used to interact with Conclave Functions.","title":"Frontend"},{"location":"conclavepass-sample/#cli","text":"The CLI is a terminal-based tool written in Kotlin that allows login/logout and management of user keys. This demonstrates how the Conclave Cloud Kotlin/Java SDK can be used to interact with Conclave Functions.","title":"Cli"},{"location":"conclavepass-sample/#how-is-privacy-preserved","text":"With the ConclavePass solution, the only component that has access to the user databases in an unencrypted form is the function code that runs within the Conclave Functions service. But how do we ensure that is the case? Conclave Cloud makes it easy to ensure that only authorised function code can access data. It does this by running the code within an Intel SGX enclave and providing an attestation that proves the validity of the platform as well as the integrity and authenticity of the code running inside the enclave. The details of this whole process are handled by the Conclave Cloud platform and the client SDKs. Let's take a look first at how a user sends a password to the service. The frontend or CLI will call the addEntry function, passing the user's password and details of the new password entry. This information obviously should not be sent unencrypted. Furthermore it should be encrypted using a key that is only accessible to the set of functions that have been approved by the user to handle the user's database. The Conclave Cloud client SDK obtains a public key from the platform that is signed by a report that proves the private key can only be accessed within an approved Conclave Functions enclave. The client SDK validates the report and ensures the key signature does indeed match the signature in the report. Once this key has been established we can encrypt data using this key safe in the knowledge that only a valid Conclave Functions enclave can decrypt it. The password entry is encrypted using this key and the addEntry function invoked. This is then picked up inside a Conclave Functions enclave which can decrypt the parameters using the private key that only it has access to. The function retrieves the encrypted user database from the external service. Once the function has the user's encrypted database it then decrypts it. The key used to encrypt/decrypt the enclave is derived from a number of sources, all of which need to be present to obtain the correct key: The Project key - this is the same key that is used to decrypt the function code itself and the invocation parameters that were provided to the function. The hash of the code that is executing. By mixing this into the encryption key we can assure that if the code is modified or changed then it cannot access the database. The user's password - by mixing this in we can assure one user cannot access the database for another user. The function decrypts the database, adds the new entry, re-encrypts it then sends it back to the backend. So, we can see that the only entity that has access to all the secrets required to access each user's database entry is Conclave Functions, and only then when running the exact same code that the user expects the functions to be running, and when provided with the user's password.","title":"How is privacy preserved?"},{"location":"conclavepass-sample/#building-and-deploying-the-demonstration","text":"Each component must be built and deployed or hosted in order to run the demonstration.","title":"Building and deploying the demonstration"},{"location":"conclavepass-sample/#1-backend","text":"The backend service needs to be available as a fixed IP on the internet in order to allow Conclave Functions to access it for storing user databases. It is recommended to set up a new virtual machine with your cloud service provider to host this. The resource requirements are tiny so you can use the smallest size of virtual machine your cloud service provider provides. The service is built using this command: ./gradlew build You can then deploy the build/libs/conclavepass-0.0.1-SNAPSHOT.jar file to your virtual machine and run it with: java -jar ./conclavepass-0.0.1-SNAPSHOT.jar","title":"1. Backend"},{"location":"conclavepass-sample/#2-functions","text":"Note down the IP address for the backend service that you have just deployed and update the functions module to connect to the service with that address in functions/src/index.ts . Then see the instructions in functions/README.md for information on how to setup a Conclave Cloud project and build and deploy the functions ready for use.","title":"2. Functions"},{"location":"conclavepass-sample/#3-frontend","text":"The Conclave Cloud JavaScript client SDK is not yet hosted in a public repository so you will need to download and unzip it locally and update the frontend project to use your local copy. Instructions on how to do this and build and run the frontend can be found in frontend/README.md . Once the frontend is running you can access it at http://localhost:4200.","title":"3. Frontend"},{"location":"conclavepass-sample/#4-cli","text":"The Conclave Cloud Java client SDK is not yet hosted in a public repository so you will need to download and unzip it locally and update the CLI project to use your local copy. Instructions on how to do this and build and run the CLI can be found in frontend/README.md .","title":"4. CLI"},{"location":"conclavepass-sample/#usage-notes","text":"This is only a demo of a password manager. As such, it provides only very basic functionality and error handling. There are a few things to note when trying the demonstration.","title":"Usage notes"},{"location":"conclavepass-sample/#the-username-is-used-as-the-user-token","text":"When you enter your username, the name is run through a SHA256 hashing algorithm and converted to a hex string. This is used as the token for the user. The backend service stores and retrieves encrypted databases using this token.","title":"The username is used as the user token"},{"location":"conclavepass-sample/#the-password-is-set-on-first-access","text":"The first time a user token is used, there is no entry within the backend service so it returns an empty string. The functions component assumes this is a new user and creates an empty database encrypted with the current password. All subsequent access must use the same password, and the password cannot be changed.","title":"The password is set on first access"},{"location":"conclavepass-sample/#incorrect-passwords-are-not-handled-well","text":"When an incorrect password is used, the decrypt function returns invalid data within the functions component. This is not checked and the JavaScript code subsequently fails. This obviously serves the purpose of protecting the database but is not a good user experience. This is something that can be improved in the demonstration code - maybe an exercise for the reader!","title":"Incorrect passwords are not handled well"},{"location":"conclavepass-sample/#the-database-is-not-persisted","text":"As mentioned above, restarting the backend service clears all user data. This is useful for demonstration purposes but does not make for a very useful password manager!","title":"The database is not persisted"},{"location":"creating-a-function-module/","text":"Creating a Function Module using ccl A Conclave Function needs to be uploaded in a single JavaScript file. However, you can use a transpiler and a packing tool to take a multi-file project using any language that can be transpiled into JavaScript, transpile it then pack it into a single file for upload. When configuring a module in this way, it can be quite difficult to get the correct configuration in order to support the version of JavaScript and export mechanism that Conclave Functions uses. For that reason, the Conclave Cloud ccl tool provides commands to create both TypeScript and JavaScript modules as well as to add new functions to existing modules. Creating a new Function Module Firstly ensure you have the npm tool installed to allow the Function Module to be managed and built. Open a terminal or command prompt in the directory where you want to create your module and run the following command: ccl module new --language=[language] --project=[project name or id] --root=[module_name] The language value can be either typescript or javascript depending on the type of module you want to create. The project name or id should be set to the project that you will be uploading the function module into. This can be changed after the module has been created by editing the configuration files. If you have used the command ccl save to set a default project ID then you can omit this parameter. The module_name is the name of the module and will be used as the name for the directory containing the module. For example, to create a TypeScript module named mymodule in the current default project, use the following command: ccl module new --language=typescript --root=mymodule The generated module will contain the following files: Path Description cclmodule.json The configuration of the module during creation. This information will be used by ccl when running commands to modify the module. package.json The npm configuration file that contains metadata and dependencies for the module. README.md Information about the generated module, including information about how to build and upload the module to Conclave Cloud. tsconfig.json For TypeScript projects, contains the configuration of the TypeScript transpiler, pre-configured to work with Conclave Cloud. webpack.config.js Webpack configuration file that assembles all source modules and dependencies into a single JavaScript file for upload to Conclave Cloud. src/index.ts A code module that exports the functions defined in the module. This will be updated by ccl each time you add a function to the module. test/test.js A JavaScript file that can be edited to test the functions within your module. test/template/polyfill.js A JavaScript file that emulates the JavaScript modules supported in the Conclave Functions runtime environment. Adding a function to the module When you first create a function module it is created as an empty module that does not contain any exported functions. In order to create a Conclave Function you need to create a new function within the module. From a terminal within the root directory of your module: ccl module add --name=[name of function] For example, to create a function named function1 in the mymodule module: cd mymodule ccl module add --name=function1 The command will generate a new source file named src/functions/function1.ts which contains the following placeholder code: // Auto-generated function code, generated with the Conclave Cloud ccl tool. // Replace the implementation below with your own code. export async function function1(arg1: string, arg2: string): Promise<string> { return arg1 + arg2; } Replace the code in the function with your own implementation. Preparing the module build Like with any other npm module, you need to install the tools and dependencies for the module before it can be built or uploaded. Run this command from the root directory of the module. npm install Testing An empty test module has been provided in test/test.js . Modify this file to exercise your Conclave Functions before uploading. You can run the tests with the following command: npm run test Uploading your module Once you have added and implemented your functions you can use npm to upload them to Conclave Cloud. They will be uploaded to the project you defined when creating the module unless you have edited the configuration to use a different project. Run this command to upload to the module project: npm run upload Targeting a different Conclave Cloud Project If you wish to change the project that the module is targeting then you must edit the project ID in cclmodule.json and the entries in the upload script in package.json . Adding modules using npm You can add third party dependencies to your module using the npm tool, as long as they do not depend on capabilities that are not present in Conclave Functions (such as fs file support). For example, to add the CryptoJS library to your module: npm install crypto-js You can then use CryptoJS in your function module: import {AES} from \"crypto-js\"; export async function function1(arg1: string, arg2: string): Promise<string> { const encrypted = AES.encrypt(arg1 + arg2, crypto.getProjectKey()); return encrypted.toString() }","title":"Creating a Function Module"},{"location":"creating-a-function-module/#creating-a-function-module-using-ccl","text":"A Conclave Function needs to be uploaded in a single JavaScript file. However, you can use a transpiler and a packing tool to take a multi-file project using any language that can be transpiled into JavaScript, transpile it then pack it into a single file for upload. When configuring a module in this way, it can be quite difficult to get the correct configuration in order to support the version of JavaScript and export mechanism that Conclave Functions uses. For that reason, the Conclave Cloud ccl tool provides commands to create both TypeScript and JavaScript modules as well as to add new functions to existing modules.","title":"Creating a Function Module using ccl"},{"location":"creating-a-function-module/#creating-a-new-function-module","text":"Firstly ensure you have the npm tool installed to allow the Function Module to be managed and built. Open a terminal or command prompt in the directory where you want to create your module and run the following command: ccl module new --language=[language] --project=[project name or id] --root=[module_name] The language value can be either typescript or javascript depending on the type of module you want to create. The project name or id should be set to the project that you will be uploading the function module into. This can be changed after the module has been created by editing the configuration files. If you have used the command ccl save to set a default project ID then you can omit this parameter. The module_name is the name of the module and will be used as the name for the directory containing the module. For example, to create a TypeScript module named mymodule in the current default project, use the following command: ccl module new --language=typescript --root=mymodule The generated module will contain the following files: Path Description cclmodule.json The configuration of the module during creation. This information will be used by ccl when running commands to modify the module. package.json The npm configuration file that contains metadata and dependencies for the module. README.md Information about the generated module, including information about how to build and upload the module to Conclave Cloud. tsconfig.json For TypeScript projects, contains the configuration of the TypeScript transpiler, pre-configured to work with Conclave Cloud. webpack.config.js Webpack configuration file that assembles all source modules and dependencies into a single JavaScript file for upload to Conclave Cloud. src/index.ts A code module that exports the functions defined in the module. This will be updated by ccl each time you add a function to the module. test/test.js A JavaScript file that can be edited to test the functions within your module. test/template/polyfill.js A JavaScript file that emulates the JavaScript modules supported in the Conclave Functions runtime environment.","title":"Creating a new Function Module"},{"location":"creating-a-function-module/#adding-a-function-to-the-module","text":"When you first create a function module it is created as an empty module that does not contain any exported functions. In order to create a Conclave Function you need to create a new function within the module. From a terminal within the root directory of your module: ccl module add --name=[name of function] For example, to create a function named function1 in the mymodule module: cd mymodule ccl module add --name=function1 The command will generate a new source file named src/functions/function1.ts which contains the following placeholder code: // Auto-generated function code, generated with the Conclave Cloud ccl tool. // Replace the implementation below with your own code. export async function function1(arg1: string, arg2: string): Promise<string> { return arg1 + arg2; } Replace the code in the function with your own implementation.","title":"Adding a function to the module"},{"location":"creating-a-function-module/#preparing-the-module-build","text":"Like with any other npm module, you need to install the tools and dependencies for the module before it can be built or uploaded. Run this command from the root directory of the module. npm install","title":"Preparing the module build"},{"location":"creating-a-function-module/#testing","text":"An empty test module has been provided in test/test.js . Modify this file to exercise your Conclave Functions before uploading. You can run the tests with the following command: npm run test","title":"Testing"},{"location":"creating-a-function-module/#uploading-your-module","text":"Once you have added and implemented your functions you can use npm to upload them to Conclave Cloud. They will be uploaded to the project you defined when creating the module unless you have edited the configuration to use a different project. Run this command to upload to the module project: npm run upload","title":"Uploading your module"},{"location":"creating-a-function-module/#targeting-a-different-conclave-cloud-project","text":"If you wish to change the project that the module is targeting then you must edit the project ID in cclmodule.json and the entries in the upload script in package.json .","title":"Targeting a different Conclave Cloud Project"},{"location":"creating-a-function-module/#adding-modules-using-npm","text":"You can add third party dependencies to your module using the npm tool, as long as they do not depend on capabilities that are not present in Conclave Functions (such as fs file support). For example, to add the CryptoJS library to your module: npm install crypto-js You can then use CryptoJS in your function module: import {AES} from \"crypto-js\"; export async function function1(arg1: string, arg2: string): Promise<string> { const encrypted = AES.encrypt(arg1 + arg2, crypto.getProjectKey()); return encrypted.toString() }","title":"Adding modules using npm"},{"location":"creating-your-first-function/","text":"Creating your first Function in Conclave Cloud This is a very basic tutorial on how to create a simple JavaScript function and upload it to the Conclave Functions service in the Conclave Cloud platform. Prerequisites In order to follow this tutorial you should already have done the following: Sign-up for the Conclave Cloud beta and log in to the portal. Download and install the ccl tool for your operating system and verify it works. 1. Create a new project A new project can be created either in the portal or using the ccl tool. Using the portal Click the \"New Project\" button and enter a name for the project. Using the CLI ccl projects create --name \"My Project\" You may be prompted to login using your Conclave Cloud username and password. 2. Set the project as the default project in ccl This is just for convenience to make subsequent command lines shorter. Firstly you need to get the project ID. You can see this in the portal project page, or you can find it using ccl . ccl projects list Set the project ID as the default, replacing [ID] with the actual ID. ccl save --project [ID] Write a JavaScript function using any editor Here's an example for you. Save it as 'simple.js'. cclexports = { sayHello: (name) => { return \"Hello \" + name; } } This creates a global object named cclexports that contains all of the functions that should be exported from the JavaScript module. In this case, there is one function named sayHello that returns a string that says \"Hello \" appended with the name argument. Note: The cclexports object is important. Conclave Functions will look for this when the code is uploaded to determine what functions can be called within the code module. Make sure you always populate this object with the function you want to call. Upload the function You can use the ccl tool to upload the function: ccl functions upload --name \"sayHello\" --code simple.js --entry \"sayHello\" At this point your function is live and hosted! It can be called from anywhere in the world! Just a word on the arguments before we invoke it. name is the name of the function that appears in the portal. code defines the code module to upload. entry defines the name of the exported function we want to call. The name and the entry do not need to be the same. Invoke the function Again, you can use the ccl tool to do this: ccl functions invoke --name \"sayHello\" --args \"[\\\"World\\\"]\" This should work and you should see something similar to the following: *** The expected code hash has not been specified and has been set to the value calculated when the function was uploaded. Please ensure this hash is correct. *** Result: {\"name\":\"sayHello\",\"version\":\"1.0.0\",\"invocationId\":\"73904ecb224a4971904ecb224a69713d\",\"start\":1649432866241,\"end\":1649432866671,\"duration\":430,\"response\":{\"status\":\"success\",\"result\":{\"result\":\"ABUBAAAAAAAAAAAABmludm9rZQAAAACyBkdL95AXywZ8ayxSOKGyIAb07XFAFRqIKsHG66ytZHrQC5SUS+SIc/3bc3jN/sPl5TKZQefKvgSEn+MBttCI2n49X0FB0zQ5gQjal5Z7w2JbcL0VYWtuXdN34wbpKpHyAQ90oqAQ1nw7O3iQQAyHjfO2ho3WatdAKvXGCj6fbnfGHL+vTfApXhSsrEDsEdp8iuRuT/jp/0V7NgP/DhWiA8sJS9AE9VCv0HWap/Us0jvmFKQUrrKB/jHAqTmDvRi5EPCSyaN/I3X8+xbIWXYtiXN4UNHmb2OxfMUzYkRdozx1VGNorsw9oZkos5/NvUbdUWfRV1d9+42ywK6qIWtDTADP0ITIkOaX9CpmZWgck9PkeFK/YEHhrTostoLmKzNxniaEUD/nVHexjzNXX31XFWTZ7cqPlT8fZ3gn8IqD7VuwAoxXQ0tNPfF7TqUqTXthqCO+7F+e63hXuD4rmUsV+sMeoiezt7ZQeCTvg4psSyomABK3kpkbWD/lKz9mgNB87DQsGGs=\"},\"success\":true,\"size\":565},\"logs\":[],\"cause\":null,\"statusCode\":null,\"waitTime\":235.0,\"timeout\":false,\"initTime\":334.0} Decrypted: { \"return\": \"Hello World\" } That is the raw data that is returned by the function. The important bit is in the Decrypted: section at the bottom as it contains the decrypted return of the function. The ccl tool creates a private key for communicating with Conclave Cloud and is the only entity that can decrypted the encrypted result you can see in the data returned from the invocation. And that's it!!! You've successfully written, deployed and invoked your first function! Things to try Previous invocations You can see a list of previous invocations using this command: ccl invocations list This shows information such as how long the function took to run as well as whether it was a cold or warm start (Google it!). It doesn't always update immediately so you may have to run it more than once. Function list You can see the list of functions that you have uploaded with: ccl functions list Explore the portal The portal provides you with graphs and metrics about your functions and invocations. Have a browse around and see what you discover!","title":"Creating your first function"},{"location":"creating-your-first-function/#creating-your-first-function-in-conclave-cloud","text":"This is a very basic tutorial on how to create a simple JavaScript function and upload it to the Conclave Functions service in the Conclave Cloud platform.","title":"Creating your first Function in Conclave Cloud"},{"location":"creating-your-first-function/#prerequisites","text":"In order to follow this tutorial you should already have done the following: Sign-up for the Conclave Cloud beta and log in to the portal. Download and install the ccl tool for your operating system and verify it works.","title":"Prerequisites"},{"location":"creating-your-first-function/#1-create-a-new-project","text":"A new project can be created either in the portal or using the ccl tool.","title":"1. Create a new project"},{"location":"creating-your-first-function/#using-the-portal","text":"Click the \"New Project\" button and enter a name for the project.","title":"Using the portal"},{"location":"creating-your-first-function/#using-the-cli","text":"ccl projects create --name \"My Project\" You may be prompted to login using your Conclave Cloud username and password.","title":"Using the CLI"},{"location":"creating-your-first-function/#2-set-the-project-as-the-default-project-in-ccl","text":"This is just for convenience to make subsequent command lines shorter. Firstly you need to get the project ID. You can see this in the portal project page, or you can find it using ccl . ccl projects list Set the project ID as the default, replacing [ID] with the actual ID. ccl save --project [ID]","title":"2. Set the project as the default project in ccl"},{"location":"creating-your-first-function/#write-a-javascript-function-using-any-editor","text":"Here's an example for you. Save it as 'simple.js'. cclexports = { sayHello: (name) => { return \"Hello \" + name; } } This creates a global object named cclexports that contains all of the functions that should be exported from the JavaScript module. In this case, there is one function named sayHello that returns a string that says \"Hello \" appended with the name argument. Note: The cclexports object is important. Conclave Functions will look for this when the code is uploaded to determine what functions can be called within the code module. Make sure you always populate this object with the function you want to call.","title":"Write a JavaScript function using any editor"},{"location":"creating-your-first-function/#upload-the-function","text":"You can use the ccl tool to upload the function: ccl functions upload --name \"sayHello\" --code simple.js --entry \"sayHello\" At this point your function is live and hosted! It can be called from anywhere in the world! Just a word on the arguments before we invoke it. name is the name of the function that appears in the portal. code defines the code module to upload. entry defines the name of the exported function we want to call. The name and the entry do not need to be the same.","title":"Upload the function"},{"location":"creating-your-first-function/#invoke-the-function","text":"Again, you can use the ccl tool to do this: ccl functions invoke --name \"sayHello\" --args \"[\\\"World\\\"]\" This should work and you should see something similar to the following: *** The expected code hash has not been specified and has been set to the value calculated when the function was uploaded. Please ensure this hash is correct. *** Result: {\"name\":\"sayHello\",\"version\":\"1.0.0\",\"invocationId\":\"73904ecb224a4971904ecb224a69713d\",\"start\":1649432866241,\"end\":1649432866671,\"duration\":430,\"response\":{\"status\":\"success\",\"result\":{\"result\":\"ABUBAAAAAAAAAAAABmludm9rZQAAAACyBkdL95AXywZ8ayxSOKGyIAb07XFAFRqIKsHG66ytZHrQC5SUS+SIc/3bc3jN/sPl5TKZQefKvgSEn+MBttCI2n49X0FB0zQ5gQjal5Z7w2JbcL0VYWtuXdN34wbpKpHyAQ90oqAQ1nw7O3iQQAyHjfO2ho3WatdAKvXGCj6fbnfGHL+vTfApXhSsrEDsEdp8iuRuT/jp/0V7NgP/DhWiA8sJS9AE9VCv0HWap/Us0jvmFKQUrrKB/jHAqTmDvRi5EPCSyaN/I3X8+xbIWXYtiXN4UNHmb2OxfMUzYkRdozx1VGNorsw9oZkos5/NvUbdUWfRV1d9+42ywK6qIWtDTADP0ITIkOaX9CpmZWgck9PkeFK/YEHhrTostoLmKzNxniaEUD/nVHexjzNXX31XFWTZ7cqPlT8fZ3gn8IqD7VuwAoxXQ0tNPfF7TqUqTXthqCO+7F+e63hXuD4rmUsV+sMeoiezt7ZQeCTvg4psSyomABK3kpkbWD/lKz9mgNB87DQsGGs=\"},\"success\":true,\"size\":565},\"logs\":[],\"cause\":null,\"statusCode\":null,\"waitTime\":235.0,\"timeout\":false,\"initTime\":334.0} Decrypted: { \"return\": \"Hello World\" } That is the raw data that is returned by the function. The important bit is in the Decrypted: section at the bottom as it contains the decrypted return of the function. The ccl tool creates a private key for communicating with Conclave Cloud and is the only entity that can decrypted the encrypted result you can see in the data returned from the invocation.","title":"Invoke the function"},{"location":"creating-your-first-function/#and-thats-it","text":"You've successfully written, deployed and invoked your first function!","title":"And that's it!!!"},{"location":"creating-your-first-function/#things-to-try","text":"","title":"Things to try"},{"location":"creating-your-first-function/#previous-invocations","text":"You can see a list of previous invocations using this command: ccl invocations list This shows information such as how long the function took to run as well as whether it was a cold or warm start (Google it!). It doesn't always update immediately so you may have to run it more than once.","title":"Previous invocations"},{"location":"creating-your-first-function/#function-list","text":"You can see the list of functions that you have uploaded with: ccl functions list","title":"Function list"},{"location":"creating-your-first-function/#explore-the-portal","text":"The portal provides you with graphs and metrics about your functions and invocations. Have a browse around and see what you discover!","title":"Explore the portal"},{"location":"crypto/","text":"Conclave Functions crypto module In order to allow data to be safely exported from serverless functions, each function has access to an encryption key that is unique to the function code within the Conclave Cloud project. This encryption key can be used to protect data that can subsequently be accessed by the same function code within the same project, but cannot be accessed by any other entity including the data originator. Using this key allows functions to securely export and import state, providing a simple way to combine datasets or derive information from multiple data sources without ever providing access to the data to any entity other than the function itself. Key derivation The key used to encrypt the data is derived in the sequence defined below: The Conclave Cloud master key. The Project key. The hash of the source code that defines a function or a set of functions. This means that each source code module obtains a unique key even if the same code is uploaded to another Conclave Cloud project. Note however though that the key is derived from the hash of the source code but does not include the hash of the function entry point. Deriving a key in this way means that a set of functions that are all defined in a single code module can share a key, making it easy to develop an entire module that works with an encrypted state. If you wish to make a cryptographic separation between two different functions in the same project then you need to ensure each function is uploaded within a different source module. Example This example shows how to encrypt some data that can only be decrypted by functions defined in the same module within the same project, using the project key as a passphrase for the crypto-js AES.encrypt function. const encrypted = AES.encrypt(data_to_encrypt, crypto.getProjectKey()); 'crypto' Interface crypto.getProjectKey() Get the project key - the key which is unique to the code module within the project where the code is hosted. The function returns a 32 byte key that is Base64 encoded to a string.","title":"Crypto"},{"location":"crypto/#conclave-functions-crypto-module","text":"In order to allow data to be safely exported from serverless functions, each function has access to an encryption key that is unique to the function code within the Conclave Cloud project. This encryption key can be used to protect data that can subsequently be accessed by the same function code within the same project, but cannot be accessed by any other entity including the data originator. Using this key allows functions to securely export and import state, providing a simple way to combine datasets or derive information from multiple data sources without ever providing access to the data to any entity other than the function itself.","title":"Conclave Functions crypto module"},{"location":"crypto/#key-derivation","text":"The key used to encrypt the data is derived in the sequence defined below: The Conclave Cloud master key. The Project key. The hash of the source code that defines a function or a set of functions. This means that each source code module obtains a unique key even if the same code is uploaded to another Conclave Cloud project. Note however though that the key is derived from the hash of the source code but does not include the hash of the function entry point. Deriving a key in this way means that a set of functions that are all defined in a single code module can share a key, making it easy to develop an entire module that works with an encrypted state. If you wish to make a cryptographic separation between two different functions in the same project then you need to ensure each function is uploaded within a different source module.","title":"Key derivation"},{"location":"crypto/#example","text":"This example shows how to encrypt some data that can only be decrypted by functions defined in the same module within the same project, using the project key as a passphrase for the crypto-js AES.encrypt function. const encrypted = AES.encrypt(data_to_encrypt, crypto.getProjectKey());","title":"Example"},{"location":"crypto/#crypto-interface","text":"crypto.getProjectKey() Get the project key - the key which is unique to the code module within the project where the code is hosted. The function returns a 32 byte key that is Base64 encoded to a string.","title":"'crypto' Interface"},{"location":"fetch/","text":"Conclave Functions fetch module Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary in order to persist the user databases. The JavaScript engine in Conclave Functions supports a subset of the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is vitally important to ensure that any data exchanged via fetch() is encrypted as the request is made outside the Conclave Functions Intel SGX enclave. Example Here is an example of using fetch() to GET a URL: cclexports = { lookup: async (url) => { var retval = await fetch(url); return await retval.text(); } } And another example showing a POST : cclexports = { lookup: (url) => { var retval; fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: \"{ \\\"test\\\": \\\"Hello\\\" }\" }).then(result => { result.text().then(text => { retval = text; }, error => {}) }); return retval; } } Fetch Interface fetch() The main method that is used to fetch a resource. Usage: fetch(url, options).then(function(response) { // Handle HTTP response }, function(error) { // Handle error } Options Field Description method The HTTP verb: POST/PUT/GET/DELETE/PATCH body The request body. headers Optional headers specified as an object. credentials Authentication credentials. Response An object that represents the response from a server. Field/Method Description status HTTP response status (100-599). statusText Textual representation of the status. ok True if the status is 2xx . text() Return the response as a string. json() Response parsed using JSON.parse . arrayBuffer() Response as an array buffer.","title":"Fetch"},{"location":"fetch/#conclave-functions-fetch-module","text":"Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary in order to persist the user databases. The JavaScript engine in Conclave Functions supports a subset of the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is vitally important to ensure that any data exchanged via fetch() is encrypted as the request is made outside the Conclave Functions Intel SGX enclave.","title":"Conclave Functions fetch module"},{"location":"fetch/#example","text":"Here is an example of using fetch() to GET a URL: cclexports = { lookup: async (url) => { var retval = await fetch(url); return await retval.text(); } } And another example showing a POST : cclexports = { lookup: (url) => { var retval; fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: \"{ \\\"test\\\": \\\"Hello\\\" }\" }).then(result => { result.text().then(text => { retval = text; }, error => {}) }); return retval; } }","title":"Example"},{"location":"fetch/#fetch-interface","text":"fetch() The main method that is used to fetch a resource.","title":"Fetch Interface"},{"location":"fetch/#usage","text":"fetch(url, options).then(function(response) { // Handle HTTP response }, function(error) { // Handle error }","title":"Usage:"},{"location":"fetch/#options","text":"Field Description method The HTTP verb: POST/PUT/GET/DELETE/PATCH body The request body. headers Optional headers specified as an object. credentials Authentication credentials.","title":"Options"},{"location":"fetch/#response","text":"An object that represents the response from a server. Field/Method Description status HTTP response status (100-599). statusText Textual representation of the status. ok True if the status is 2xx . text() Return the response as a string. json() Response parsed using JSON.parse . arrayBuffer() Response as an array buffer.","title":"Response"},{"location":"invoking-your-first-function-with-js-sdk/","text":"Invoking your first Function using the Conclave Cloud JS SDK This is a set-up tutorial on how to invoke a simple JavaScript function using the React framework and the Conclave Cloud JS SDK. This is a step-by-step walkthrough and uses the Hello Conclave Cloud project from the Conclave Cloud Samples Repo . Once completed the User can invoke a conclave cloud function from the project ui. Prerequisites In order to follow this tutorial you should already have done the following: Sign-up for a Conclave Cloud Beta account and log in to the portal. Download and install the ccl tool for your operating system and verify it works. Upload the simple.js function to Conclave Cloud Beta by following the steps documented in \"Creating your first function\" . 1. Run the Hello Conclave Cloud project Get the Hello Conclave Cloud Tutorial repository: git clone https://github.com/R3Conclave/conclave-cloud-samples.git In the hello-conclave-cloud-tutorial directory install and run the project: npm install npm start This is the base ui set-up for the sayHello function call, the sdk has yet to be configured. 2. Install and Configure the Conclave Cloud SDK Install the conclave-cloud-sdk npm package: npm install conclave-cloud-sdk --save npm install /path to file/conclave-cloud-sdk-0.1.0.tgz --save In the projects root directory create a new file and call it ConclaveCloud.js Add the following configurations: import { Conclave } from 'conclave-cloud-sdk' const conclaveConfig = new Conclave.create({ tenantID: 'tenantId', projectID: 'projectId', }); export default conclaveConfig; Id's can be found in a selected projects dashboard screen in ( Conclave Cloud Beta ) or by running the following CLI commands: ccl platform tenant ccl projects list This project was built using create-react-app which due to webpack 5 have breaking changes. The project has already been set-up to use react-app-rewired to bypass the errors. To learn more about breaking changes and the options to bypass read: Section 4.Fixing Breaking Changes with create-react-app below. 3. Invoke Call via SDK Import conclaveConfig into the App.tsx file import conclaveConfig from \"./ConclaveCloud\"; Add the following to the sendMessage function: response = await conclaveConfig.functions.call( \"function name\", \"function hash\", [args] ); the [args] value will be the input value from the project. It should look like so: response = await conclaveConfig.functions.call( \"sayHello\", \"60C5AEFCE46A44163467EC82C204AB5207B780A45527A65A6580886AECAC49D4\", [input] ); You can now invoke the function from the ui. 4. Fixing Breaking Changes with create-react-app Due to create-react-app using Webpack 5+, you will experience some breaking changes due to polyfills not being included. Below are options to use in your project to include polyfills, either by downgrading to Webpack 4.*or by manually including polyfills: Downgrading react-scripts: npm uninstall react-scripts npm install react-scripts@4.0.3 Adding a Webpack config file with fallback: In the root project directory create the file webpack.config.js, add the following: module.exports = { resolve: { fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), }, }, }; then npm install crypto-browserify stream-browserify --save Adding fallback to react-script's webpack configuration file: After initial npm install navigate to `node_modules/react-scripts/config/webpack.config.js, find module.exports in this file. In module.exports section find resolve section and add the following fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } The section should look like this: module.exports = function (webpackEnv) { ... return { ... resolve: { ... fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } } } } Using react-app-rewired: Run the following: npm install react-app-rewired In the root project directory create the file config-overrides.js Add the following: module.exports = function override(config) { const fallback = config.resolve.fallback || {}; Object.assign(fallback, { \"stream\": require.resolve(\"stream-browserify\"), \"crypto\": require.resolve(\"crypto-browserify\") }); config.resolve.fallback = fallback; return config; }; then: npm install crypto-browserify stream-browserify --save in package.json change the start scripts: \"scripts\": { \"start\": \"react-scripts start\", change to \"scripts\": { \"start\": \"react-app-rewired start\", then npm start","title":"Tutorial - Invoking your function using Conclave Cloud JS SDK"},{"location":"invoking-your-first-function-with-js-sdk/#invoking-your-first-function-using-the-conclave-cloud-js-sdk","text":"This is a set-up tutorial on how to invoke a simple JavaScript function using the React framework and the Conclave Cloud JS SDK. This is a step-by-step walkthrough and uses the Hello Conclave Cloud project from the Conclave Cloud Samples Repo . Once completed the User can invoke a conclave cloud function from the project ui.","title":"Invoking your first Function using the Conclave Cloud JS SDK"},{"location":"invoking-your-first-function-with-js-sdk/#prerequisites","text":"In order to follow this tutorial you should already have done the following: Sign-up for a Conclave Cloud Beta account and log in to the portal. Download and install the ccl tool for your operating system and verify it works. Upload the simple.js function to Conclave Cloud Beta by following the steps documented in \"Creating your first function\" .","title":"Prerequisites"},{"location":"invoking-your-first-function-with-js-sdk/#1-run-the-hello-conclave-cloud-project","text":"Get the Hello Conclave Cloud Tutorial repository: git clone https://github.com/R3Conclave/conclave-cloud-samples.git In the hello-conclave-cloud-tutorial directory install and run the project: npm install npm start This is the base ui set-up for the sayHello function call, the sdk has yet to be configured.","title":"1. Run the Hello Conclave Cloud project"},{"location":"invoking-your-first-function-with-js-sdk/#2-install-and-configure-the-conclave-cloud-sdk","text":"Install the conclave-cloud-sdk npm package: npm install conclave-cloud-sdk --save npm install /path to file/conclave-cloud-sdk-0.1.0.tgz --save In the projects root directory create a new file and call it ConclaveCloud.js Add the following configurations: import { Conclave } from 'conclave-cloud-sdk' const conclaveConfig = new Conclave.create({ tenantID: 'tenantId', projectID: 'projectId', }); export default conclaveConfig; Id's can be found in a selected projects dashboard screen in ( Conclave Cloud Beta ) or by running the following CLI commands: ccl platform tenant ccl projects list This project was built using create-react-app which due to webpack 5 have breaking changes. The project has already been set-up to use react-app-rewired to bypass the errors. To learn more about breaking changes and the options to bypass read: Section 4.Fixing Breaking Changes with create-react-app below.","title":"2. Install and Configure the Conclave Cloud SDK"},{"location":"invoking-your-first-function-with-js-sdk/#3-invoke-call-via-sdk","text":"Import conclaveConfig into the App.tsx file import conclaveConfig from \"./ConclaveCloud\"; Add the following to the sendMessage function: response = await conclaveConfig.functions.call( \"function name\", \"function hash\", [args] ); the [args] value will be the input value from the project. It should look like so: response = await conclaveConfig.functions.call( \"sayHello\", \"60C5AEFCE46A44163467EC82C204AB5207B780A45527A65A6580886AECAC49D4\", [input] ); You can now invoke the function from the ui.","title":"3. Invoke Call via SDK"},{"location":"invoking-your-first-function-with-js-sdk/#4-fixing-breaking-changes-with-create-react-app","text":"Due to create-react-app using Webpack 5+, you will experience some breaking changes due to polyfills not being included. Below are options to use in your project to include polyfills, either by downgrading to Webpack 4.*or by manually including polyfills:","title":"4. Fixing Breaking Changes with create-react-app"},{"location":"invoking-your-first-function-with-js-sdk/#downgrading-react-scripts","text":"npm uninstall react-scripts npm install react-scripts@4.0.3","title":"Downgrading react-scripts:"},{"location":"invoking-your-first-function-with-js-sdk/#adding-a-webpack-config-file-with-fallback","text":"In the root project directory create the file webpack.config.js, add the following: module.exports = { resolve: { fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), }, }, }; then npm install crypto-browserify stream-browserify --save","title":"Adding a Webpack config file with fallback:"},{"location":"invoking-your-first-function-with-js-sdk/#adding-fallback-to-react-scripts-webpack-configuration-file","text":"After initial npm install navigate to `node_modules/react-scripts/config/webpack.config.js, find module.exports in this file. In module.exports section find resolve section and add the following fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } The section should look like this: module.exports = function (webpackEnv) { ... return { ... resolve: { ... fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } } } }","title":"Adding fallback to react-script's webpack configuration file:"},{"location":"invoking-your-first-function-with-js-sdk/#using-react-app-rewired","text":"Run the following: npm install react-app-rewired In the root project directory create the file config-overrides.js Add the following: module.exports = function override(config) { const fallback = config.resolve.fallback || {}; Object.assign(fallback, { \"stream\": require.resolve(\"stream-browserify\"), \"crypto\": require.resolve(\"crypto-browserify\") }); config.resolve.fallback = fallback; return config; }; then: npm install crypto-browserify stream-browserify --save in package.json change the start scripts: \"scripts\": { \"start\": \"react-scripts start\", change to \"scripts\": { \"start\": \"react-app-rewired start\", then npm start","title":"Using react-app-rewired:"},{"location":"javascript-in-conclave-functions/","text":"Using JavaScript in Conclave Functions Conclave Functions provides a fully capable ES6 JavaScript engine in which to execute your function code. However, due to the nature of enclaves, not everything works inside an enclave. JavaScript Engine Conclave functions provides a pure JavaScript engine. It does not provide full support for environments like Node.js (yet). This means that without importing libraries, you do not have access to Node.js built-ins such as file support or Buffer . However, you can create a project using npm and import standard packages to fill in the gaps. The ConclavePass sample uses this technique, implementing an npm component that compiles to a single JavaScript file for upload, importing a cryptographic library, buffer and other useful tools. In addition, the Conclave Cloud ccl tool provides a command to bootstrap a new JavaScript or TypeScript project that supports multiple code modules and packages and packs them into a single JavaScript file for uploading to Conclave Functions. You can read how you can use this to create your function module here .","title":"Overview"},{"location":"javascript-in-conclave-functions/#using-javascript-in-conclave-functions","text":"Conclave Functions provides a fully capable ES6 JavaScript engine in which to execute your function code. However, due to the nature of enclaves, not everything works inside an enclave.","title":"Using JavaScript in Conclave Functions"},{"location":"javascript-in-conclave-functions/#javascript-engine","text":"Conclave functions provides a pure JavaScript engine. It does not provide full support for environments like Node.js (yet). This means that without importing libraries, you do not have access to Node.js built-ins such as file support or Buffer . However, you can create a project using npm and import standard packages to fill in the gaps. The ConclavePass sample uses this technique, implementing an npm component that compiles to a single JavaScript file for upload, importing a cryptographic library, buffer and other useful tools. In addition, the Conclave Cloud ccl tool provides a command to bootstrap a new JavaScript or TypeScript project that supports multiple code modules and packages and packs them into a single JavaScript file for uploading to Conclave Functions. You can read how you can use this to create your function module here .","title":"JavaScript Engine"},{"location":"what-is-conclave-cloud/","text":"What is Conclave Cloud? Conclave Cloud is a platform for hosting privacy-preserving applications. Built on top of the Conclave SDK, which in turn is built to take advantage of Intel Software Guard Extensions (Intel SGX), Conclave Cloud is a platform that will provide all the tools necessary to ensure that access to data is provided only to authorised parties. The Conclave Cloud platform will bring together an expanding set of services that will seamlessly integrate with each other providing a rich set of tools for implementing solutions without ever having to leave the Conclave Cloud platform. But we're not there yet! We don't have all of the services in the diagram above in the platform. In fact, we will be relying on our customers (including you) to drive the requirements for which services we should prioritise. So what services does Conclave Cloud deliver now? The current platform delivers our first service, Conclave Functions, which is a serverless execution environment, much like AWS Lambda or Azure Cloud Functions. Conclave Functions differs from other similar services by using end-to-end encryption between the end user and the container that runs the function, with data-in-use encryption provided by using a Conclave Enclave to run the code. The use of an enclave ensures the integrity and privacy of the user's data as well as providing hardware-backed assurances over the exact code that will be processing the data. With Conclave Functions, developers can deploy their code once to the platform where it will then be hosted for them. Their functions can be called once a year, once an hour, up to thousands of times an hour. The platform will cope with the demand and scale accordingly with no management or intervention from the developer. What can you do with Conclave Cloud/Functions? Conclave Functions allows you to write code that will run inside an enclave with absolutely no boilerplate whatsover ! This means that you can focus on writing your data processing logic that will run inside an enclave without worrying about how to transfer data to and from the enclave, or how to encrypt data, or how to ensure the platform integrity is maintained. You can prove to your users that the code that you say will process their data actually is the code that processes the data, as well as proving that you as a service host or author do not have access to the keys that encrypt the user's data. In fact, it also proves that nobody except the Conclave Functions enclave can access the data , and that includes R3 and Azure: our cloud service provider. Theoretically, any problem that can be solved using the Conclave SDK can also be solved in Conclave Functions. However, features such as persistence and authentication will be provided by additional services in the platform that do not yet exist. One thing to remember is that Conclave Functions are stateless. Every time you invoke your function in the Conclave Functions service, any previous state is likely to be lost. There is a chance that previous state is available in-memory but you cannot rely on it - the best you can do is use any previous state as a cache that can be used if present. Obviously stateless functions have limited use - you may as well just run the function locally on the user's machine if you don't have the ability save or share data from the cloud. Luckily, Conclave Functions provides an alternative to storing state directly. It supports a subset of the JavaScript fetch() API allowing outgoing calls to external services. This means that a function can retrieve and set data using an external service. Care must be taken to ensure private data is not leaked by the external call, as the actual call takes place outside of the enclave. But what problems can be solved with Conclave Functions? Conclave functions can be used to provide solutions or enhance the privacy for many different types of application, including: Pure data protection products such as cloud-based file storage with secure file sharing. Zero Knowledge Proof type applications, such as proving identity or age without providing the actual data to the verifying party. Multiparty computation where data is collated from multiple parties and derived into a combined result, without divulging the shared data with any other party or service. Private set intersection applications, such as allowing different institutions to find common data between their own private datasets and the data of other parties. Conclave Cloud provides a sample which shows how to implement a password manager using Conclave Functions along with a web-based frontend, a Kotlin-based CLI tool and a Spring backend for persistence. You can find the sample in this GitHub repository . The sample does not really fit into any of the categories above, but you can imagine expanding it to allow, for example, the service to automatically scan for compromised keys and notify the user.","title":"What is Conclave Cloud?"},{"location":"what-is-conclave-cloud/#what-is-conclave-cloud","text":"Conclave Cloud is a platform for hosting privacy-preserving applications. Built on top of the Conclave SDK, which in turn is built to take advantage of Intel Software Guard Extensions (Intel SGX), Conclave Cloud is a platform that will provide all the tools necessary to ensure that access to data is provided only to authorised parties. The Conclave Cloud platform will bring together an expanding set of services that will seamlessly integrate with each other providing a rich set of tools for implementing solutions without ever having to leave the Conclave Cloud platform. But we're not there yet! We don't have all of the services in the diagram above in the platform. In fact, we will be relying on our customers (including you) to drive the requirements for which services we should prioritise.","title":"What is Conclave Cloud?"},{"location":"what-is-conclave-cloud/#so-what-services-does-conclave-cloud-deliver-now","text":"The current platform delivers our first service, Conclave Functions, which is a serverless execution environment, much like AWS Lambda or Azure Cloud Functions. Conclave Functions differs from other similar services by using end-to-end encryption between the end user and the container that runs the function, with data-in-use encryption provided by using a Conclave Enclave to run the code. The use of an enclave ensures the integrity and privacy of the user's data as well as providing hardware-backed assurances over the exact code that will be processing the data. With Conclave Functions, developers can deploy their code once to the platform where it will then be hosted for them. Their functions can be called once a year, once an hour, up to thousands of times an hour. The platform will cope with the demand and scale accordingly with no management or intervention from the developer.","title":"So what services does Conclave Cloud deliver now?"},{"location":"what-is-conclave-cloud/#what-can-you-do-with-conclave-cloudfunctions","text":"Conclave Functions allows you to write code that will run inside an enclave with absolutely no boilerplate whatsover ! This means that you can focus on writing your data processing logic that will run inside an enclave without worrying about how to transfer data to and from the enclave, or how to encrypt data, or how to ensure the platform integrity is maintained. You can prove to your users that the code that you say will process their data actually is the code that processes the data, as well as proving that you as a service host or author do not have access to the keys that encrypt the user's data. In fact, it also proves that nobody except the Conclave Functions enclave can access the data , and that includes R3 and Azure: our cloud service provider. Theoretically, any problem that can be solved using the Conclave SDK can also be solved in Conclave Functions. However, features such as persistence and authentication will be provided by additional services in the platform that do not yet exist. One thing to remember is that Conclave Functions are stateless. Every time you invoke your function in the Conclave Functions service, any previous state is likely to be lost. There is a chance that previous state is available in-memory but you cannot rely on it - the best you can do is use any previous state as a cache that can be used if present. Obviously stateless functions have limited use - you may as well just run the function locally on the user's machine if you don't have the ability save or share data from the cloud. Luckily, Conclave Functions provides an alternative to storing state directly. It supports a subset of the JavaScript fetch() API allowing outgoing calls to external services. This means that a function can retrieve and set data using an external service. Care must be taken to ensure private data is not leaked by the external call, as the actual call takes place outside of the enclave.","title":"What can you do with Conclave Cloud/Functions?"},{"location":"what-is-conclave-cloud/#but-what-problems-can-be-solved-with-conclave-functions","text":"Conclave functions can be used to provide solutions or enhance the privacy for many different types of application, including: Pure data protection products such as cloud-based file storage with secure file sharing. Zero Knowledge Proof type applications, such as proving identity or age without providing the actual data to the verifying party. Multiparty computation where data is collated from multiple parties and derived into a combined result, without divulging the shared data with any other party or service. Private set intersection applications, such as allowing different institutions to find common data between their own private datasets and the data of other parties. Conclave Cloud provides a sample which shows how to implement a password manager using Conclave Functions along with a web-based frontend, a Kotlin-based CLI tool and a Spring backend for persistence. You can find the sample in this GitHub repository . The sample does not really fit into any of the categories above, but you can imagine expanding it to allow, for example, the service to automatically scan for compromised keys and notify the user.","title":"But what problems can be solved with Conclave Functions?"}]}