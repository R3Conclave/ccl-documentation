{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started with Conclave Cloud Welcome to Conclave Cloud - the serverless platform that preserves privacy. This site provides you with all the information you need to understand what Conclave Cloud is and what it can do. You can also find information on how to create your first Conclave function and develop a simple password manager as an example. Sign-up for access to Conclave Cloud If you haven't already, the first thing to do is sign up and create an account on Conclave Cloud. You can sign up at the Conclave Cloud portal landing page . Click on CREATE ACCOUNT and enter your details to register. Once you have signed up, you can log in to the Conclave Cloud portal. What next? You need to create a project and upload one or more functions to your project. Use the resources below to guide you through the platform. Resources The following pages describe Conclave Cloud and give examples to write and invoke Conclave Functions. Page Description What is Conclave Cloud? An overview of the Conclave Cloud platform and what it can do. Conclave Cloud Concepts Understand projects and functions in Conclave CLoud. Creating your first function Write your first JavaScript function, upload it to the platform, and invoke it. JavaScript in Conclave Functions Writing JavaScript for Conclave Functions is not quite the same as for other platforms such as node. Find more out about it here. The ConclavePass Sample View an in-depth example which shows how to use TypeScript in Conclave Functions, Java clients, and JavaScript clients. You can interact with Conclave Cloud using the Conclave Cloud Command Line Interface ( ccl ) as well as client SDKs for Java, Kotlin, and JavaScript. You can obtain the latest versions of these tools and SDKs from the table below. Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS Manage your Conclave Cloud projects and services from the terminal. Copyright License Command Line tool for Windows Manage your Conclave Cloud projects and services from the terminal. Copyright License Conclave Cloud JavaScript Client SDK Interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK Interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License For information about the current release and about previous releases, please visit the releases page . Installing the ccl tool You need Java 11 or higher runtime environment to run the ccl tool. Linux/macOS Windows Download the ccl tool using this link . Make the tool executable with the command: chmod +x ccl Add the directory containing the ccl tool to your PATH environment variable. Test it by executing ccl . Download the zip file using this link . Unzip the contents to the folder of your choice. Open the start menu, type env , and choose Edit the system environment variables . Click the Environment Variables button. Find the Path entry, edit it, and add the folder containing the tool to the path value. Restart your command prompt to ensure the path has been updated. Note that for Windows, whenever you are asked to type ccl , you need to replace it with ccl.bat . Installing the Conclave Cloud JavaScript client SDK Download and unzip the SDK ) to the directory of your choice. The zip file contains an npm-compatible component. You can import it into your JavaScript/TypeScript application by setting it as a dependency in your project. To add it as a dependency, add the following to your package.json , making sure to provide the correct path to where you unzipped the SDK. \"dependencies\" : { ... \"conclave-cloud-sdk\" : \"file:path/to/conclave-cloud-sdk-1.0.0-beta2.tgz\" , ... } Installing the Conclave Cloud Java/Kotlin Client SDK Download and unzip the SDK to the directory of your choice. The zip file contains a file-based Maven repository. Add the repository to your build.gradle.kts , making sure to provide the correct path to where you unzipped the SDK. repositories { maven ( url = \"path/to/conclave-cloud-sdk/repo\" ) mavenCentral () } Add the SDK as a dependency: // Conclave Cloud implementation ( \"com.r3.conclave.cloud:conclave-cloud-sdk:1.0-RC1\" )","title":"Getting Started"},{"location":"#getting-started-with-conclave-cloud","text":"Welcome to Conclave Cloud - the serverless platform that preserves privacy. This site provides you with all the information you need to understand what Conclave Cloud is and what it can do. You can also find information on how to create your first Conclave function and develop a simple password manager as an example.","title":"Getting Started with Conclave Cloud"},{"location":"#sign-up-for-access-to-conclave-cloud","text":"If you haven't already, the first thing to do is sign up and create an account on Conclave Cloud. You can sign up at the Conclave Cloud portal landing page . Click on CREATE ACCOUNT and enter your details to register. Once you have signed up, you can log in to the Conclave Cloud portal.","title":"Sign-up for access to Conclave Cloud"},{"location":"#what-next","text":"You need to create a project and upload one or more functions to your project. Use the resources below to guide you through the platform.","title":"What next?"},{"location":"#resources","text":"The following pages describe Conclave Cloud and give examples to write and invoke Conclave Functions. Page Description What is Conclave Cloud? An overview of the Conclave Cloud platform and what it can do. Conclave Cloud Concepts Understand projects and functions in Conclave CLoud. Creating your first function Write your first JavaScript function, upload it to the platform, and invoke it. JavaScript in Conclave Functions Writing JavaScript for Conclave Functions is not quite the same as for other platforms such as node. Find more out about it here. The ConclavePass Sample View an in-depth example which shows how to use TypeScript in Conclave Functions, Java clients, and JavaScript clients. You can interact with Conclave Cloud using the Conclave Cloud Command Line Interface ( ccl ) as well as client SDKs for Java, Kotlin, and JavaScript. You can obtain the latest versions of these tools and SDKs from the table below. Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS Manage your Conclave Cloud projects and services from the terminal. Copyright License Command Line tool for Windows Manage your Conclave Cloud projects and services from the terminal. Copyright License Conclave Cloud JavaScript Client SDK Interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK Interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License For information about the current release and about previous releases, please visit the releases page .","title":"Resources"},{"location":"#installing-the-ccl-tool","text":"You need Java 11 or higher runtime environment to run the ccl tool. Linux/macOS Windows Download the ccl tool using this link . Make the tool executable with the command: chmod +x ccl Add the directory containing the ccl tool to your PATH environment variable. Test it by executing ccl . Download the zip file using this link . Unzip the contents to the folder of your choice. Open the start menu, type env , and choose Edit the system environment variables . Click the Environment Variables button. Find the Path entry, edit it, and add the folder containing the tool to the path value. Restart your command prompt to ensure the path has been updated. Note that for Windows, whenever you are asked to type ccl , you need to replace it with ccl.bat .","title":"Installing the ccl tool"},{"location":"#installing-the-conclave-cloud-javascript-client-sdk","text":"Download and unzip the SDK ) to the directory of your choice. The zip file contains an npm-compatible component. You can import it into your JavaScript/TypeScript application by setting it as a dependency in your project. To add it as a dependency, add the following to your package.json , making sure to provide the correct path to where you unzipped the SDK. \"dependencies\" : { ... \"conclave-cloud-sdk\" : \"file:path/to/conclave-cloud-sdk-1.0.0-beta2.tgz\" , ... }","title":"Installing the Conclave Cloud JavaScript client SDK"},{"location":"#installing-the-conclave-cloud-javakotlin-client-sdk","text":"Download and unzip the SDK to the directory of your choice. The zip file contains a file-based Maven repository. Add the repository to your build.gradle.kts , making sure to provide the correct path to where you unzipped the SDK. repositories { maven ( url = \"path/to/conclave-cloud-sdk/repo\" ) mavenCentral () } Add the SDK as a dependency: // Conclave Cloud implementation ( \"com.r3.conclave.cloud:conclave-cloud-sdk:1.0-RC1\" )","title":"Installing the Conclave Cloud Java/Kotlin Client SDK"},{"location":"conclave-cloud-concepts/","text":"Conclave Cloud Concepts To get started with Conclave Cloud, you need to understand a few important concepts in the Conclave Cloud portal and the Command Line Interface (CLI). Let's start by defining those two: Conclave Cloud Portal The Conclave Cloud portal gives you the tools to manage your Conclave Cloud account and projects in a user-friendly, web-based interface. When you first log in, you can see a list of existing projects and an option to create a new project. The definition of a project is given below . Within a project, you can check to see which functions you have deployed, how many times you have called them, and lots of other information and metrics about the platform. Conclave Cloud Command Line Tool The Conclave Cloud Command Line Tool is known as ccl for short as this is the command you enter to invoke it in the terminal or command prompt. You can download the tool here . The ccl tool provides all the management options available in the portal. It allows you to upload and invoke functions without writing client code. This feature helps to test your functions or try out the Conclave Cloud platform. Enter ccl in your terminal or command prompt to see available commands. There is help available for each command too. For example, you can enter the following command to get help for the functions command. ccl functions --help Projects A Conclave Cloud project is a specific configuration of the Conclave Cloud services. Currently, a project contains a particular set of uploaded functions and shows usage and log data for just those functions. You can think of a project as an individual application or a service. For example, you may have a project for 'Password Manager', or for a more extensive application, you may have projects named 'Project X Payment Processor' and 'Project X User Data'. When experimenting with the platform, create a project with a random name. You can always delete it when you're finished. Project UID When you first open a project in the portal, you will get a value called Project UID . The project UID is the unique identifier for the current project. Note: Project names are also unique. The project UID is not a confidential value. Functions A Conclave function is a JavaScript code module that exports an entry point. The combination of this code plus the entry point name is uploaded and defines a single 'function' within the Conclave Functions service. Each project will allow the configuration of a set of functions to invoke using the Conclave Functions service. You can upload as many functions as you want, each designed to perform a different task. You might find it more convenient to create an npm package and configure it using a tool such as webpack to assemble multiple files or even languages into a single JavaScript file for uploading to Conclave Functions. You can even define multiple exported functions from a JavaScript module, then upload the same file multiple times but change the entry point each time to create multiple functions. The Conclave Cloud Password Manager sample uses this approach. Take a look at the source code here . Function hashes Whenever you upload a function to Conclave Functions, ccl will calculate the SHA256 hash of the JavaScript code with the entry point's name concatenated to the end. If the code or entry point changes, the hash also changes. Whenever an end user wants to invoke a function, they specify the hash of the code and the function's entry point that they expect to be processing their data. Once the Conclave Functions enclave receives the request, it checks the expected hash against the actual hash as calculated inside the enclave and rejects the invocation request if they do not match. This verification ensures that the user fully controls what code can access their data. The ccl tool will automatically use the previously calculated hash. This is not the most secure way to execute a function because if the hash changes, the ccl calculation will automatically update and call the function anyway. To counter this, you can manually provide a hash via the command line. When using Conclave Cloud's JavaScript or Java/Kotlin SDKs, you must provide the expected hash when invoking a function.","title":"Conclave Cloud Concepts"},{"location":"conclave-cloud-concepts/#conclave-cloud-concepts","text":"To get started with Conclave Cloud, you need to understand a few important concepts in the Conclave Cloud portal and the Command Line Interface (CLI). Let's start by defining those two:","title":"Conclave Cloud Concepts"},{"location":"conclave-cloud-concepts/#conclave-cloud-portal","text":"The Conclave Cloud portal gives you the tools to manage your Conclave Cloud account and projects in a user-friendly, web-based interface. When you first log in, you can see a list of existing projects and an option to create a new project. The definition of a project is given below . Within a project, you can check to see which functions you have deployed, how many times you have called them, and lots of other information and metrics about the platform.","title":"Conclave Cloud Portal"},{"location":"conclave-cloud-concepts/#conclave-cloud-command-line-tool","text":"The Conclave Cloud Command Line Tool is known as ccl for short as this is the command you enter to invoke it in the terminal or command prompt. You can download the tool here . The ccl tool provides all the management options available in the portal. It allows you to upload and invoke functions without writing client code. This feature helps to test your functions or try out the Conclave Cloud platform. Enter ccl in your terminal or command prompt to see available commands. There is help available for each command too. For example, you can enter the following command to get help for the functions command. ccl functions --help","title":"Conclave Cloud Command Line Tool"},{"location":"conclave-cloud-concepts/#projects","text":"A Conclave Cloud project is a specific configuration of the Conclave Cloud services. Currently, a project contains a particular set of uploaded functions and shows usage and log data for just those functions. You can think of a project as an individual application or a service. For example, you may have a project for 'Password Manager', or for a more extensive application, you may have projects named 'Project X Payment Processor' and 'Project X User Data'. When experimenting with the platform, create a project with a random name. You can always delete it when you're finished.","title":"Projects"},{"location":"conclave-cloud-concepts/#project-uid","text":"When you first open a project in the portal, you will get a value called Project UID . The project UID is the unique identifier for the current project. Note: Project names are also unique. The project UID is not a confidential value.","title":"Project UID"},{"location":"conclave-cloud-concepts/#functions","text":"A Conclave function is a JavaScript code module that exports an entry point. The combination of this code plus the entry point name is uploaded and defines a single 'function' within the Conclave Functions service. Each project will allow the configuration of a set of functions to invoke using the Conclave Functions service. You can upload as many functions as you want, each designed to perform a different task. You might find it more convenient to create an npm package and configure it using a tool such as webpack to assemble multiple files or even languages into a single JavaScript file for uploading to Conclave Functions. You can even define multiple exported functions from a JavaScript module, then upload the same file multiple times but change the entry point each time to create multiple functions. The Conclave Cloud Password Manager sample uses this approach. Take a look at the source code here .","title":"Functions"},{"location":"conclave-cloud-concepts/#function-hashes","text":"Whenever you upload a function to Conclave Functions, ccl will calculate the SHA256 hash of the JavaScript code with the entry point's name concatenated to the end. If the code or entry point changes, the hash also changes. Whenever an end user wants to invoke a function, they specify the hash of the code and the function's entry point that they expect to be processing their data. Once the Conclave Functions enclave receives the request, it checks the expected hash against the actual hash as calculated inside the enclave and rejects the invocation request if they do not match. This verification ensures that the user fully controls what code can access their data. The ccl tool will automatically use the previously calculated hash. This is not the most secure way to execute a function because if the hash changes, the ccl calculation will automatically update and call the function anyway. To counter this, you can manually provide a hash via the command line. When using Conclave Cloud's JavaScript or Java/Kotlin SDKs, you must provide the expected hash when invoking a function.","title":"Function hashes"},{"location":"conclavepass-sample/","text":"Conclave Pass - Password Manager implemented using Conclave Cloud Conclave Cloud provides a password manager as a sample application. You can get the application's code from this GitHub repository . Sample description The Conclave Pass repository contains a set of projects that together implement a basic password manager service that demonstrates how to use Conclave Cloud services to provide a privacy-preserving backend to an application. The end user can interact with the password manager service using both a web-based frontend implemented with Angular, and a command-line tool written in Kotlin. How do existing password managers work? Password managers maintain a database of password entries that are all protected by a single master password or access key. The password database contains sensitive information that the user wants to keep private. Even the password manager service administrators shouldn't be able to access entries within the database. Password managers typically solve this privacy problem by storing the database using at-rest encryption in a cloud database. When users access the database on a new device, the application synchronizes a cloud copy of the entire database to the device. The user can then perform all database operations in the client application or the web browser. For example, you can find the architecture used by LastPass here . This approach is secure but has some limitations: If the database grows large, it may take significant network bandwidth/storage on the endpoint device. There is no opportunity for sharing or collaboration on database entries. For password managers, these are not actual limitations, but this demo project shows that you can use Conclave Cloud to solve these two issues in other types of applications by accessing the database inside an SGX enclave on the cloud. What's the architecture of the ConclavePass app? The following diagram illustrates the architecture of the ConclavePass application. The components in the diagram are named corresponding to the Conclave Pass directory that contains its implementation. These components are described below: Functions The functions component consists of a typescript module that provides methods that you can use to add, query, get, and remove entries within the user's database. This component requires access to the unencrypted database, and therefore, to ensure privacy, runtime encryption is used by hosting the functions within Conclave Cloud in the Conclave Functions service. Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary to persist the user databases. The functions component uses the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is critical to encrypt any data exchanged via fetch() as the request comes from outside the Intel SGX enclave of Conclave Functions. The Functions module uses another built-in function, crypto.getProjectKey() to get a key unique to the project and function code and uses this key to encrypt/decrypt the user's database before exchanging it with external storage. Backend The backend service stores and retrieves the encrypted database for each user. The encrypted data it handles can only be accessed within the functions component, ensuring that no unauthorized entity can access the user databases. The simple implementation provided within this project consists of a Spring application that stores the databases in a key/value map in memory. All entries are lost if the service restarts. Frontend The front end is a web application that allows login/logout and management of user keys. This web application implemented using the Angular framework demonstrates how you can interact with Conclave Functions using the Conclave Cloud JavaScript SDK. Command Line Interface (CLI) The CLI is a terminal-based tool written in Kotlin that allows login/logout and management of user keys. This tool demonstrates how you can interact with Conclave Functions using Conclave Cloud's Kotlin/Java SDKs. How is privacy preserved? With the ConclavePass solution, the only component that can access the user databases in an unencrypted form is the function code that runs within the Conclave Functions service. But how do we ensure that is the case? Conclave Cloud ensures that only authorized function codes can access data. It does this by running the code within an Intel SGX enclave and providing an attestation to prove platform validity, code integrity, and code authenticity. The Conclave Cloud platform and the client SDKs handle the details of this whole process. Let's look at how a user sends a password to the service. The front end or the CLI calls the addEntry function, passing the user's password and details of the new password entry. Conclave Cloud encrypts this information using a key that is only accessible to the set of functions that the user has approved to handle the user's database. The Conclave Cloud client SDK obtains a public key from the platform signed by a report proving that the private key can only be accessed within an approved Conclave Functions enclave. The client SDK validates the report and ensures the key signature matches the report's signature. After validating the key, Conclave Cloud encrypts data using this key, safe in the knowledge that only a valid Conclave Functions enclave can decrypt it. The password entry is encrypted using this key, and the addEntry function is invoked. The encrypted password is then picked up inside a Conclave Functions enclave which can decrypt the parameters using the private key that only it has access to. The function retrieves the encrypted user database from the external service. Once the function has the user's encrypted database, it decrypts it. The key used to encrypt/decrypt the enclave is derived from many sources, all of which need to be present to obtain the correct key: The project key. This is the same key used to decrypt the function code and the invocation parameters provided to the function. The hash of the code that is executing. Mixing this into the encryption key ensures that if someone modifies the code, it cannot access the database. The user's password. It ensures that one user cannot access the database for another user. The function decrypts the database, adds the new entry, re-encrypts it, and sends it back to the backend. So, you can see that the only entity that has access to all the secrets required to access each user's database entry is a Conclave Function running the exact code the user expects it to run and when it has the user's password. Building and deploying the demonstration You must host each of the below components to run the demonstration. 1. Backend The backend service needs to be available with a fixed IP on the internet to allow Conclave Functions to access it for storing user databases. Conclave Cloud recommends setting up a new virtual machine with your cloud service provider to host this. You can choose a VM with the smallest size, as the resource requirements are minimal. Build the service using this command: ./gradlew build Deploy the build/libs/conclavepass-0.0.1-SNAPSHOT.jar file to your VM. Run the backend service with this command: java -jar ./conclavepass-0.0.1-SNAPSHOT.jar 2. Functions Note down the IP address for the backend service that you have just deployed, and update the functions module to connect to the service with that address in functions/src/index.ts . Follow the instructions in functions/README.md to set up a Conclave Cloud project and build and deploy the functions ready for use. 3. Frontend Download and unzip the Conclave Cloud JavaScript client SDK and update the frontend project to use your local copy. Build and run the front end. You can find detailed instructions here . Once the front end is running, you can access it at http://localhost:4200. 4. Command Line Interface (CLI) Download and unzip the Conclave Cloud Java client SDK and update the CLI project to use your local copy. Build and run the CLI. You can find detailed instructions here . Usage notes This sample is only a demo of a password manager application. It provides only basic functionality and error handling. There are a few things to note when you try the demo. The username is used as the user token When you enter your username, Conclave Cloud runs it through a SHA256 hashing algorithm and converts it to a hex string. This hex string acts as the token for the user. The backend service stores and retrieves encrypted databases using this token. The password is fixed on the first access The first time a user token is used, there is no entry within the backend service. So, it returns an empty string. The functions component assumes this is a new user and creates an empty database encrypted with the current password. All subsequent access must use the same password. So the user cannot change the password later. Incorrect passwords are not handled well If you enter an incorrect password, the decrypt function returns invalid data within the functions component. The sample app doesn't handle this invalid data well, and the JavaScript code fails. This behavior serves the purpose of protecting the database but is not a good user experience. This is something that can be improved in the demonstration code. The database is not persisted As mentioned above, restarting the backend service clears all user data. This behavior is useful for demonstration purposes. However, you should not use this sample application for real-world password management because of the risk of data loss.","title":"ConclavePass Sample using Conclave Functions"},{"location":"conclavepass-sample/#conclave-pass-password-manager-implemented-using-conclave-cloud","text":"Conclave Cloud provides a password manager as a sample application. You can get the application's code from this GitHub repository .","title":"Conclave Pass - Password Manager implemented using Conclave Cloud"},{"location":"conclavepass-sample/#sample-description","text":"The Conclave Pass repository contains a set of projects that together implement a basic password manager service that demonstrates how to use Conclave Cloud services to provide a privacy-preserving backend to an application. The end user can interact with the password manager service using both a web-based frontend implemented with Angular, and a command-line tool written in Kotlin.","title":"Sample description"},{"location":"conclavepass-sample/#how-do-existing-password-managers-work","text":"Password managers maintain a database of password entries that are all protected by a single master password or access key. The password database contains sensitive information that the user wants to keep private. Even the password manager service administrators shouldn't be able to access entries within the database. Password managers typically solve this privacy problem by storing the database using at-rest encryption in a cloud database. When users access the database on a new device, the application synchronizes a cloud copy of the entire database to the device. The user can then perform all database operations in the client application or the web browser. For example, you can find the architecture used by LastPass here . This approach is secure but has some limitations: If the database grows large, it may take significant network bandwidth/storage on the endpoint device. There is no opportunity for sharing or collaboration on database entries. For password managers, these are not actual limitations, but this demo project shows that you can use Conclave Cloud to solve these two issues in other types of applications by accessing the database inside an SGX enclave on the cloud.","title":"How do existing password managers work?"},{"location":"conclavepass-sample/#whats-the-architecture-of-the-conclavepass-app","text":"The following diagram illustrates the architecture of the ConclavePass application. The components in the diagram are named corresponding to the Conclave Pass directory that contains its implementation. These components are described below:","title":"What's the architecture of the ConclavePass app?"},{"location":"conclavepass-sample/#functions","text":"The functions component consists of a typescript module that provides methods that you can use to add, query, get, and remove entries within the user's database. This component requires access to the unencrypted database, and therefore, to ensure privacy, runtime encryption is used by hosting the functions within Conclave Cloud in the Conclave Functions service. Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary to persist the user databases. The functions component uses the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is critical to encrypt any data exchanged via fetch() as the request comes from outside the Intel SGX enclave of Conclave Functions. The Functions module uses another built-in function, crypto.getProjectKey() to get a key unique to the project and function code and uses this key to encrypt/decrypt the user's database before exchanging it with external storage.","title":"Functions"},{"location":"conclavepass-sample/#backend","text":"The backend service stores and retrieves the encrypted database for each user. The encrypted data it handles can only be accessed within the functions component, ensuring that no unauthorized entity can access the user databases. The simple implementation provided within this project consists of a Spring application that stores the databases in a key/value map in memory. All entries are lost if the service restarts.","title":"Backend"},{"location":"conclavepass-sample/#frontend","text":"The front end is a web application that allows login/logout and management of user keys. This web application implemented using the Angular framework demonstrates how you can interact with Conclave Functions using the Conclave Cloud JavaScript SDK.","title":"Frontend"},{"location":"conclavepass-sample/#command-line-interface-cli","text":"The CLI is a terminal-based tool written in Kotlin that allows login/logout and management of user keys. This tool demonstrates how you can interact with Conclave Functions using Conclave Cloud's Kotlin/Java SDKs.","title":"Command Line Interface (CLI)"},{"location":"conclavepass-sample/#how-is-privacy-preserved","text":"With the ConclavePass solution, the only component that can access the user databases in an unencrypted form is the function code that runs within the Conclave Functions service. But how do we ensure that is the case? Conclave Cloud ensures that only authorized function codes can access data. It does this by running the code within an Intel SGX enclave and providing an attestation to prove platform validity, code integrity, and code authenticity. The Conclave Cloud platform and the client SDKs handle the details of this whole process. Let's look at how a user sends a password to the service. The front end or the CLI calls the addEntry function, passing the user's password and details of the new password entry. Conclave Cloud encrypts this information using a key that is only accessible to the set of functions that the user has approved to handle the user's database. The Conclave Cloud client SDK obtains a public key from the platform signed by a report proving that the private key can only be accessed within an approved Conclave Functions enclave. The client SDK validates the report and ensures the key signature matches the report's signature. After validating the key, Conclave Cloud encrypts data using this key, safe in the knowledge that only a valid Conclave Functions enclave can decrypt it. The password entry is encrypted using this key, and the addEntry function is invoked. The encrypted password is then picked up inside a Conclave Functions enclave which can decrypt the parameters using the private key that only it has access to. The function retrieves the encrypted user database from the external service. Once the function has the user's encrypted database, it decrypts it. The key used to encrypt/decrypt the enclave is derived from many sources, all of which need to be present to obtain the correct key: The project key. This is the same key used to decrypt the function code and the invocation parameters provided to the function. The hash of the code that is executing. Mixing this into the encryption key ensures that if someone modifies the code, it cannot access the database. The user's password. It ensures that one user cannot access the database for another user. The function decrypts the database, adds the new entry, re-encrypts it, and sends it back to the backend. So, you can see that the only entity that has access to all the secrets required to access each user's database entry is a Conclave Function running the exact code the user expects it to run and when it has the user's password.","title":"How is privacy preserved?"},{"location":"conclavepass-sample/#building-and-deploying-the-demonstration","text":"You must host each of the below components to run the demonstration.","title":"Building and deploying the demonstration"},{"location":"conclavepass-sample/#1-backend","text":"The backend service needs to be available with a fixed IP on the internet to allow Conclave Functions to access it for storing user databases. Conclave Cloud recommends setting up a new virtual machine with your cloud service provider to host this. You can choose a VM with the smallest size, as the resource requirements are minimal. Build the service using this command: ./gradlew build Deploy the build/libs/conclavepass-0.0.1-SNAPSHOT.jar file to your VM. Run the backend service with this command: java -jar ./conclavepass-0.0.1-SNAPSHOT.jar","title":"1. Backend"},{"location":"conclavepass-sample/#2-functions","text":"Note down the IP address for the backend service that you have just deployed, and update the functions module to connect to the service with that address in functions/src/index.ts . Follow the instructions in functions/README.md to set up a Conclave Cloud project and build and deploy the functions ready for use.","title":"2. Functions"},{"location":"conclavepass-sample/#3-frontend","text":"Download and unzip the Conclave Cloud JavaScript client SDK and update the frontend project to use your local copy. Build and run the front end. You can find detailed instructions here . Once the front end is running, you can access it at http://localhost:4200.","title":"3. Frontend"},{"location":"conclavepass-sample/#4-command-line-interface-cli","text":"Download and unzip the Conclave Cloud Java client SDK and update the CLI project to use your local copy. Build and run the CLI. You can find detailed instructions here .","title":"4. Command Line Interface (CLI)"},{"location":"conclavepass-sample/#usage-notes","text":"This sample is only a demo of a password manager application. It provides only basic functionality and error handling. There are a few things to note when you try the demo.","title":"Usage notes"},{"location":"conclavepass-sample/#the-username-is-used-as-the-user-token","text":"When you enter your username, Conclave Cloud runs it through a SHA256 hashing algorithm and converts it to a hex string. This hex string acts as the token for the user. The backend service stores and retrieves encrypted databases using this token.","title":"The username is used as the user token"},{"location":"conclavepass-sample/#the-password-is-fixed-on-the-first-access","text":"The first time a user token is used, there is no entry within the backend service. So, it returns an empty string. The functions component assumes this is a new user and creates an empty database encrypted with the current password. All subsequent access must use the same password. So the user cannot change the password later.","title":"The password is fixed on the first access"},{"location":"conclavepass-sample/#incorrect-passwords-are-not-handled-well","text":"If you enter an incorrect password, the decrypt function returns invalid data within the functions component. The sample app doesn't handle this invalid data well, and the JavaScript code fails. This behavior serves the purpose of protecting the database but is not a good user experience. This is something that can be improved in the demonstration code.","title":"Incorrect passwords are not handled well"},{"location":"conclavepass-sample/#the-database-is-not-persisted","text":"As mentioned above, restarting the backend service clears all user data. This behavior is useful for demonstration purposes. However, you should not use this sample application for real-world password management because of the risk of data loss.","title":"The database is not persisted"},{"location":"creating-a-function-module/","text":"Creating a function module using ccl You need to upload a Conclave Function in a single JavaScript file. However, if you have a multi-file project, you can use a packing tool to pack it into a single file for upload. You can also use a transpiler to transpile your projects in other languages to Javascript. When configuring a module using a transpiler, getting the correct configuration to support the version of JavaScript and export mechanism that Conclave Functions uses can be challenging. For that reason, the Conclave Cloud ccl tool provides commands to create TypeScript and JavaScript modules and add new functions to existing modules. Creating a new function module Firstly, ensure you have the npm tool installed to build and manage function modules. Open a terminal or command prompt and change to the directory where you want to create your function module. Run the following command: ccl module new --language=<language_name> --project=<project_name or UID> --root=<module_name> The language value can be either typescript or javascript depending on the type of module you want to create. The project name or UID should be set to the project to which you upload the function module. You can change this after creating the module by editing the configuration files. You can omit this parameter if you have used the command ccl save to set a default project UID/name. The module_name is the name of the module and is used as the name for the directory containing the module. For example, to create a TypeScript module named mymodule in the current default project, use the following command: ccl module new --language=typescript --root=mymodule The generated module will contain the following files: Path Description cclmodule.json The module configuration during creation. ccl uses this information when running commands to modify the module. package.json The npm configuration file that contains metadata and dependencies for the module. README.md Information about the generated module, including how to build and upload the module to Conclave Cloud. tsconfig.json For TypeScript projects, contains the configuration of the TypeScript transpiler, pre-configured to work with Conclave Cloud. webpack.config.js Webpack configuration file that assembles all source modules and dependencies into a single JavaScript file for upload to Conclave Cloud. src/index.ts A code module that exports the functions defined in the module. ccl updates this information each time you add a function to the module. test/test.js A JavaScript file that you can edit to test the functions within your module. test/template/polyfill.js A JavaScript file that emulates the JavaScript modules supported in the Conclave Functions runtime environment. Adding a function to the module When you first create a function module, it is an empty module that does not contain any exported functions. To create a Conclave Function, you must create a new function within the module. Open a terminal or command prompt and use the following command within the root directory of your module: ccl module add --name=<name_of_function> For example, to create a function named function1 in the mymodule module: cd mymodule ccl module add --name=function1 The command generates a new source file named src/functions/function1.ts which contains the following placeholder code: // Auto-generated function code, generated with the Conclave Cloud ccl tool. // Replace the implementation below with your code. export async function function1 ( arg1 : string , arg2 : string ) : Promise < string > { return arg1 + arg2 ; } Replace the code in the function with your implementation. Preparing the module build Like with any other npm module, you need to install the tools and dependencies for the module before you can build or upload the module. Run this command from the root directory of the module. npm install Testing You can find an empty test module in test/test.js . Modify this file to call your Conclave Functions before uploading. You can run the tests with the following command: npm run test Uploading your module Once you have added and implemented your functions, you can use npm to upload them. Conclave Cloud uploads your functions to the project you defined when creating the module unless you have edited the configuration to use a different project. Run this command to upload to the module project: npm run upload Targeting a different Conclave Cloud Project If you wish to change the project that the module is targeting, then you must edit the project UID in cclmodule.json and the entries in the upload script in package.json . Adding modules using npm You can add third-party dependencies to your module using the npm tool, as long as they do not depend on capabilities not present in Conclave Functions (such as fs file support). For example, to add the CryptoJS library to your module: npm install crypto-js You can then use CryptoJS in your function module: import { AES } from \"crypto-js\" ; export async function function1 ( arg1 : string , arg2 : string ) : Promise < string > { const encrypted = AES . encrypt ( arg1 + arg2 , crypto . getProjectKey ()); return encrypted . toString () }","title":"Creating a Function Module"},{"location":"creating-a-function-module/#creating-a-function-module-using-ccl","text":"You need to upload a Conclave Function in a single JavaScript file. However, if you have a multi-file project, you can use a packing tool to pack it into a single file for upload. You can also use a transpiler to transpile your projects in other languages to Javascript. When configuring a module using a transpiler, getting the correct configuration to support the version of JavaScript and export mechanism that Conclave Functions uses can be challenging. For that reason, the Conclave Cloud ccl tool provides commands to create TypeScript and JavaScript modules and add new functions to existing modules.","title":"Creating a function module using ccl"},{"location":"creating-a-function-module/#creating-a-new-function-module","text":"Firstly, ensure you have the npm tool installed to build and manage function modules. Open a terminal or command prompt and change to the directory where you want to create your function module. Run the following command: ccl module new --language=<language_name> --project=<project_name or UID> --root=<module_name> The language value can be either typescript or javascript depending on the type of module you want to create. The project name or UID should be set to the project to which you upload the function module. You can change this after creating the module by editing the configuration files. You can omit this parameter if you have used the command ccl save to set a default project UID/name. The module_name is the name of the module and is used as the name for the directory containing the module. For example, to create a TypeScript module named mymodule in the current default project, use the following command: ccl module new --language=typescript --root=mymodule The generated module will contain the following files: Path Description cclmodule.json The module configuration during creation. ccl uses this information when running commands to modify the module. package.json The npm configuration file that contains metadata and dependencies for the module. README.md Information about the generated module, including how to build and upload the module to Conclave Cloud. tsconfig.json For TypeScript projects, contains the configuration of the TypeScript transpiler, pre-configured to work with Conclave Cloud. webpack.config.js Webpack configuration file that assembles all source modules and dependencies into a single JavaScript file for upload to Conclave Cloud. src/index.ts A code module that exports the functions defined in the module. ccl updates this information each time you add a function to the module. test/test.js A JavaScript file that you can edit to test the functions within your module. test/template/polyfill.js A JavaScript file that emulates the JavaScript modules supported in the Conclave Functions runtime environment.","title":"Creating a new function module"},{"location":"creating-a-function-module/#adding-a-function-to-the-module","text":"When you first create a function module, it is an empty module that does not contain any exported functions. To create a Conclave Function, you must create a new function within the module. Open a terminal or command prompt and use the following command within the root directory of your module: ccl module add --name=<name_of_function> For example, to create a function named function1 in the mymodule module: cd mymodule ccl module add --name=function1 The command generates a new source file named src/functions/function1.ts which contains the following placeholder code: // Auto-generated function code, generated with the Conclave Cloud ccl tool. // Replace the implementation below with your code. export async function function1 ( arg1 : string , arg2 : string ) : Promise < string > { return arg1 + arg2 ; } Replace the code in the function with your implementation.","title":"Adding a function to the module"},{"location":"creating-a-function-module/#preparing-the-module-build","text":"Like with any other npm module, you need to install the tools and dependencies for the module before you can build or upload the module. Run this command from the root directory of the module. npm install","title":"Preparing the module build"},{"location":"creating-a-function-module/#testing","text":"You can find an empty test module in test/test.js . Modify this file to call your Conclave Functions before uploading. You can run the tests with the following command: npm run test","title":"Testing"},{"location":"creating-a-function-module/#uploading-your-module","text":"Once you have added and implemented your functions, you can use npm to upload them. Conclave Cloud uploads your functions to the project you defined when creating the module unless you have edited the configuration to use a different project. Run this command to upload to the module project: npm run upload","title":"Uploading your module"},{"location":"creating-a-function-module/#targeting-a-different-conclave-cloud-project","text":"If you wish to change the project that the module is targeting, then you must edit the project UID in cclmodule.json and the entries in the upload script in package.json .","title":"Targeting a different Conclave Cloud Project"},{"location":"creating-a-function-module/#adding-modules-using-npm","text":"You can add third-party dependencies to your module using the npm tool, as long as they do not depend on capabilities not present in Conclave Functions (such as fs file support). For example, to add the CryptoJS library to your module: npm install crypto-js You can then use CryptoJS in your function module: import { AES } from \"crypto-js\" ; export async function function1 ( arg1 : string , arg2 : string ) : Promise < string > { const encrypted = AES . encrypt ( arg1 + arg2 , crypto . getProjectKey ()); return encrypted . toString () }","title":"Adding modules using npm"},{"location":"creating-your-first-function/","text":"Create, upload, and invoke your first function in Conclave Cloud This tutorial illustrates the steps to create a simple JavaScript function, upload it to the Conclave Functions service, and invoke it. Prerequisites To follow this tutorial, you should already have done the following as per the instructions here : Sign-up for Conclave Cloud and log in to the portal. Download, install, and test the ccl tool. 1. Create a new project You can create a new project using the Conclave Cloud portal or the ccl tool. Using the portal Click the New Project button and enter a name for the project. Using the CLI Use the following command to create a new project. ccl projects create --name \"My Project\" Note: A project UID will be auto-generated for you. Optionally, you may pick the UID of your project by adding --uid my-project to the command above. Both the UID and the name must be unique. You may be prompted to log in using your Conclave Cloud username and password. 2. Set the project as the default project in ccl This step is for convenience to make subsequent command lines shorter. Firstly, you need to get the project UID/name. You can see this on the portal's project page, or you can find it using ccl . ccl projects list Set the project UID/name as the default, replacing UID/name with the actual ID. ccl save --project <UID/name> 3. Write a JavaScript function using any editor Here's an example for you. Save it as 'simple.js'. cclexports = { sayHello : ( name ) => { return \"Hello \" + name ; } } This creates a global object named cclexports that contains all the functions that should be exported from the JavaScript module. In this example, one function named sayHello returns a string that says \"Hello \" appended with the name argument. Note: The cclexports object is important. Conclave Functions will look for this when you upload the code to determine what functions can be called within the code module. Always populate this object with the function you want to call. 4. Upload the function You can use the ccl tool to upload a function: ccl functions upload --name \"sayHello\" --code simple.js --entry \"sayHello\" Your function is live and hosted. You can call your function from anywhere. Here, the arguments used are: Argument Description name The function's name that appears in the portal. code The code module to upload. entry The name of the exported function you want to call. The name and the entry need not be identical. 5. Invoke the function You can use the ccl tool to invoke a function: ccl invocations invoke --name \"sayHello\" --args \"[\\\"World\\\"]\" The result should be similar to this: *** The expected code hash has not been specified and has been set to the value calculated when the function was uploaded. Please ensure this hash is correct. *** Result: {\"name\":\"sayHello\",\"version\":\"1.0.0\",\"invocationId\":\"73904ecb224a4971904ecb224a69713d\",\"start\":1649432866241,\"end\":1649432866671,\"duration\":430,\"response\":{\"status\":\"success\",\"result\":{\"result\":\"ABUBAAAAAAAAAAAABmludm9rZQAAAACyBkdL95AXywZ8ayxSOKGyIAb07XFAFRqIKsHG66ytZHrQC5SUS+SIc/3bc3jN/sPl5TKZQefKvgSEn+MBttCI2n49X0FB0zQ5gQjal5Z7w2JbcL0VYWtuXdN34wbpKpHyAQ90oqAQ1nw7O3iQQAyHjfO2ho3WatdAKvXGCj6fbnfGHL+vTfApXhSsrEDsEdp8iuRuT/jp/0V7NgP/DhWiA8sJS9AE9VCv0HWap/Us0jvmFKQUrrKB/jHAqTmDvRi5EPCSyaN/I3X8+xbIWXYtiXN4UNHmb2OxfMUzYkRdozx1VGNorsw9oZkos5/NvUbdUWfRV1d9+42ywK6qIWtDTADP0ITIkOaX9CpmZWgck9PkeFK/YEHhrTostoLmKzNxniaEUD/nVHexjzNXX31XFWTZ7cqPlT8fZ3gn8IqD7VuwAoxXQ0tNPfF7TqUqTXthqCO+7F+e63hXuD4rmUsV+sMeoiezt7ZQeCTvg4psSyomABK3kpkbWD/lKz9mgNB87DQsGGs=\"},\"success\":true,\"size\":565},\"logs\":[],\"cause\":null,\"statusCode\":null,\"waitTime\":235.0,\"timeout\":false,\"initTime\":334.0} Decrypted: { \"return\": \"Hello World\" } This result is the raw data returned by the function. The significant bit is in the Decrypted: section at the bottom, as it contains the decrypted return of the function. The ccl tool creates a private key for communicating with Conclave Cloud. This private key is the only entity that can decrypt the encrypted result in the data returned from the invocation. You've successfully invoked your first function. Previous invocations You can see a list of previous invocations using this command: ccl invocations list This command shows information such as how long the function took to run and whether it was a cold or warm start . You may have to run the command more than once, as it doesn't always update immediately. Function list You can see the list of functions that you have uploaded with the following command: ccl functions list Explore the portal The Conclave Cloud portal provides you with graphs and metrics about your functions and invocations. Browse around and see what you discover.","title":"Creating your first function"},{"location":"creating-your-first-function/#create-upload-and-invoke-your-first-function-in-conclave-cloud","text":"This tutorial illustrates the steps to create a simple JavaScript function, upload it to the Conclave Functions service, and invoke it.","title":"Create, upload, and invoke your first function in Conclave Cloud"},{"location":"creating-your-first-function/#prerequisites","text":"To follow this tutorial, you should already have done the following as per the instructions here : Sign-up for Conclave Cloud and log in to the portal. Download, install, and test the ccl tool.","title":"Prerequisites"},{"location":"creating-your-first-function/#1-create-a-new-project","text":"You can create a new project using the Conclave Cloud portal or the ccl tool.","title":"1. Create a new project"},{"location":"creating-your-first-function/#using-the-portal","text":"Click the New Project button and enter a name for the project.","title":"Using the portal"},{"location":"creating-your-first-function/#using-the-cli","text":"Use the following command to create a new project. ccl projects create --name \"My Project\" Note: A project UID will be auto-generated for you. Optionally, you may pick the UID of your project by adding --uid my-project to the command above. Both the UID and the name must be unique. You may be prompted to log in using your Conclave Cloud username and password.","title":"Using the CLI"},{"location":"creating-your-first-function/#2-set-the-project-as-the-default-project-in-ccl","text":"This step is for convenience to make subsequent command lines shorter. Firstly, you need to get the project UID/name. You can see this on the portal's project page, or you can find it using ccl . ccl projects list Set the project UID/name as the default, replacing UID/name with the actual ID. ccl save --project <UID/name>","title":"2. Set the project as the default project in ccl"},{"location":"creating-your-first-function/#3-write-a-javascript-function-using-any-editor","text":"Here's an example for you. Save it as 'simple.js'. cclexports = { sayHello : ( name ) => { return \"Hello \" + name ; } } This creates a global object named cclexports that contains all the functions that should be exported from the JavaScript module. In this example, one function named sayHello returns a string that says \"Hello \" appended with the name argument. Note: The cclexports object is important. Conclave Functions will look for this when you upload the code to determine what functions can be called within the code module. Always populate this object with the function you want to call.","title":"3. Write a JavaScript function using any editor"},{"location":"creating-your-first-function/#4-upload-the-function","text":"You can use the ccl tool to upload a function: ccl functions upload --name \"sayHello\" --code simple.js --entry \"sayHello\" Your function is live and hosted. You can call your function from anywhere. Here, the arguments used are: Argument Description name The function's name that appears in the portal. code The code module to upload. entry The name of the exported function you want to call. The name and the entry need not be identical.","title":"4. Upload the function"},{"location":"creating-your-first-function/#5-invoke-the-function","text":"You can use the ccl tool to invoke a function: ccl invocations invoke --name \"sayHello\" --args \"[\\\"World\\\"]\" The result should be similar to this: *** The expected code hash has not been specified and has been set to the value calculated when the function was uploaded. Please ensure this hash is correct. *** Result: {\"name\":\"sayHello\",\"version\":\"1.0.0\",\"invocationId\":\"73904ecb224a4971904ecb224a69713d\",\"start\":1649432866241,\"end\":1649432866671,\"duration\":430,\"response\":{\"status\":\"success\",\"result\":{\"result\":\"ABUBAAAAAAAAAAAABmludm9rZQAAAACyBkdL95AXywZ8ayxSOKGyIAb07XFAFRqIKsHG66ytZHrQC5SUS+SIc/3bc3jN/sPl5TKZQefKvgSEn+MBttCI2n49X0FB0zQ5gQjal5Z7w2JbcL0VYWtuXdN34wbpKpHyAQ90oqAQ1nw7O3iQQAyHjfO2ho3WatdAKvXGCj6fbnfGHL+vTfApXhSsrEDsEdp8iuRuT/jp/0V7NgP/DhWiA8sJS9AE9VCv0HWap/Us0jvmFKQUrrKB/jHAqTmDvRi5EPCSyaN/I3X8+xbIWXYtiXN4UNHmb2OxfMUzYkRdozx1VGNorsw9oZkos5/NvUbdUWfRV1d9+42ywK6qIWtDTADP0ITIkOaX9CpmZWgck9PkeFK/YEHhrTostoLmKzNxniaEUD/nVHexjzNXX31XFWTZ7cqPlT8fZ3gn8IqD7VuwAoxXQ0tNPfF7TqUqTXthqCO+7F+e63hXuD4rmUsV+sMeoiezt7ZQeCTvg4psSyomABK3kpkbWD/lKz9mgNB87DQsGGs=\"},\"success\":true,\"size\":565},\"logs\":[],\"cause\":null,\"statusCode\":null,\"waitTime\":235.0,\"timeout\":false,\"initTime\":334.0} Decrypted: { \"return\": \"Hello World\" } This result is the raw data returned by the function. The significant bit is in the Decrypted: section at the bottom, as it contains the decrypted return of the function. The ccl tool creates a private key for communicating with Conclave Cloud. This private key is the only entity that can decrypt the encrypted result in the data returned from the invocation. You've successfully invoked your first function.","title":"5. Invoke the function"},{"location":"creating-your-first-function/#previous-invocations","text":"You can see a list of previous invocations using this command: ccl invocations list This command shows information such as how long the function took to run and whether it was a cold or warm start . You may have to run the command more than once, as it doesn't always update immediately.","title":"Previous invocations"},{"location":"creating-your-first-function/#function-list","text":"You can see the list of functions that you have uploaded with the following command: ccl functions list","title":"Function list"},{"location":"creating-your-first-function/#explore-the-portal","text":"The Conclave Cloud portal provides you with graphs and metrics about your functions and invocations. Browse around and see what you discover.","title":"Explore the portal"},{"location":"crypto/","text":"Conclave Functions crypto module To safely export data from serverless functions, each function has access to an encryption key that is unique to the function code within the Conclave Cloud project. You can use this encryption key to protect data that can subsequently be accessed only by the same function code within the same project. No other entity can access it, including the data originator. Using this key allows functions to securely export and import state, providing a simple way to combine datasets or derive information from multiple data sources without ever giving access to the data to any entity other than the function itself. Key derivation The key used to encrypt the data is derived in the sequence defined below: The Conclave Cloud master key. The Project key. The hash of the source code that defines a function or a set of functions. Each source code module obtains a unique key even if you upload the same code to another Conclave Cloud project. Please note that the key does not include the hash of the function entry point. So, a set of functions defined in a single code module can share a key, making it easy to develop an entire module that works with an encrypted state. You must upload each function within a different source module if you wish to create a cryptographic separation between two separate functions in the same project. Example This example shows how to encrypt data that can only be decrypted by functions defined in the same module within the same project. To do this, use the project key as a passphrase for the crypto-js AES.encrypt function. const encrypted = AES . encrypt ( data_to_encrypt , crypto . getProjectKey ()); 'crypto' Interface crypto.getProjectKey() Gets the project key - the key unique to the code module within the project where you have hosted the code. The function returns a 32-byte, Base64 encoded key.","title":"Crypto"},{"location":"crypto/#conclave-functions-crypto-module","text":"To safely export data from serverless functions, each function has access to an encryption key that is unique to the function code within the Conclave Cloud project. You can use this encryption key to protect data that can subsequently be accessed only by the same function code within the same project. No other entity can access it, including the data originator. Using this key allows functions to securely export and import state, providing a simple way to combine datasets or derive information from multiple data sources without ever giving access to the data to any entity other than the function itself.","title":"Conclave Functions crypto module"},{"location":"crypto/#key-derivation","text":"The key used to encrypt the data is derived in the sequence defined below: The Conclave Cloud master key. The Project key. The hash of the source code that defines a function or a set of functions. Each source code module obtains a unique key even if you upload the same code to another Conclave Cloud project. Please note that the key does not include the hash of the function entry point. So, a set of functions defined in a single code module can share a key, making it easy to develop an entire module that works with an encrypted state. You must upload each function within a different source module if you wish to create a cryptographic separation between two separate functions in the same project.","title":"Key derivation"},{"location":"crypto/#example","text":"This example shows how to encrypt data that can only be decrypted by functions defined in the same module within the same project. To do this, use the project key as a passphrase for the crypto-js AES.encrypt function. const encrypted = AES . encrypt ( data_to_encrypt , crypto . getProjectKey ());","title":"Example"},{"location":"crypto/#crypto-interface","text":"crypto.getProjectKey() Gets the project key - the key unique to the code module within the project where you have hosted the code. The function returns a 32-byte, Base64 encoded key.","title":"'crypto' Interface"},{"location":"fetch/","text":"Conclave Functions fetch module Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary to persist the user databases. The JavaScript engine in Conclave Functions supports a subset of the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is critical to ensure that any data exchanged via fetch() is encrypted, as the request comes from outside the Intel SGX enclave of Conclave Functions. Example Here is an example of using fetch() to GET a URL: cclexports = { lookup : async ( url ) => { var retval = await fetch ( url ); return await retval . text (); } } And another example showing a POST : cclexports = { lookup : ( url ) => { var retval ; fetch ( url , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : \"{ \\\"test\\\": \\\"Hello\\\" }\" }). then ( result => { result . text (). then ( text => { retval = text ; }, error => {}) }); return retval ; } } Fetch Interface fetch() is the method used to fetch a resource. Usage: fetch ( url , options ). then ( function ( response ) { // Handle HTTP response }, function ( error ) { // Handle error } Options Field Description method The HTTP verb: POST/PUT/GET/DELETE/PATCH body The request body. headers Optional headers specified as an object. credentials Authentication credentials. Response It is an object that represents the response from a server. Field/Method Description status HTTP response status (100-599). statusText Textual representation of the status. ok True if the status is 2xx . text() Return the response as a string. json() Response parsed using JSON.parse . arrayBuffer() Response as an array buffer.","title":"Fetch"},{"location":"fetch/#conclave-functions-fetch-module","text":"Conclave Functions are stateless and do not have access to any persistent storage. Therefore, external storage within the cloud is necessary to persist the user databases. The JavaScript engine in Conclave Functions supports a subset of the JavaScript fetch() built-in capability to query and update an external data store with each user's encrypted database entries. It is critical to ensure that any data exchanged via fetch() is encrypted, as the request comes from outside the Intel SGX enclave of Conclave Functions.","title":"Conclave Functions fetch module"},{"location":"fetch/#example","text":"Here is an example of using fetch() to GET a URL: cclexports = { lookup : async ( url ) => { var retval = await fetch ( url ); return await retval . text (); } } And another example showing a POST : cclexports = { lookup : ( url ) => { var retval ; fetch ( url , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : \"{ \\\"test\\\": \\\"Hello\\\" }\" }). then ( result => { result . text (). then ( text => { retval = text ; }, error => {}) }); return retval ; } }","title":"Example"},{"location":"fetch/#fetch-interface","text":"fetch() is the method used to fetch a resource.","title":"Fetch Interface"},{"location":"fetch/#usage","text":"fetch ( url , options ). then ( function ( response ) { // Handle HTTP response }, function ( error ) { // Handle error }","title":"Usage:"},{"location":"fetch/#options","text":"Field Description method The HTTP verb: POST/PUT/GET/DELETE/PATCH body The request body. headers Optional headers specified as an object. credentials Authentication credentials.","title":"Options"},{"location":"fetch/#response","text":"It is an object that represents the response from a server. Field/Method Description status HTTP response status (100-599). statusText Textual representation of the status. ok True if the status is 2xx . text() Return the response as a string. json() Response parsed using JSON.parse . arrayBuffer() Response as an array buffer.","title":"Response"},{"location":"invoking-your-first-function-with-js-sdk/","text":"Invoking a Conclave Function using the Conclave Cloud JavaScript SDK This tutorial details how to invoke a simple JavaScript function using the React framework and the Conclave Cloud JavaScript SDK. It uses the Hello Conclave Cloud project from the Conclave Cloud samples repo . After completing this tutorial, you will be able to invoke a Conclave Cloud function from the project UI. Prerequisites To follow this tutorial, you should already have done the following: Sign-up for a Conclave Cloud account and log in to the portal. Download and install the ccl tool as per the instructions here . Upload the simple.js function to Conclave Cloud as per the instructions here . 1. Run the Hello Conclave Cloud project Get the Hello Conclave Cloud Tutorial repository: git clone https://github.com/R3Conclave/conclave-cloud-samples.git Change to the hello-conclave-cloud-tutorial directory. Install and run the project: npm install npm start This is the base UI set-up for the sayHello function call. The SDK is yet to be configured. 2. Install and configure the Conclave Cloud SDK Install the conclave-cloud-sdk npm package: npm install /path to file/conclave-cloud-sdk-1.0.0-beta2.tgz --save In the project's root directory, create a new file and call it ConclaveCloud.js . Add the following configurations: ConclaveCloud.ts import { Conclave } from 'conclave-cloud-sdk' const accessToken: ()=>Promise<String>=...; const conclaveConfig = new Conclave.create({ projectUid: 'projectUid', accessToken }); export default conclaveConfig; Note : You need to create a function that returns an accessToken. UIDs can be found in a selected project's dashboard screen in ( Conclave Cloud Beta ) or by running the following CLI command: ccl projects list This project was built using create-react-app, which due to webpack 5, has breaking changes. The project has already been set up to use react-app-rewired to bypass the errors. To learn more about breaking changes and the options to bypass, you can read this section . 3. Invoke Call via SDK Import conclaveConfig into the app.tsx file import conclaveConfig from \"./ConclaveCloud\"; Add the following to the sendMessage function: response = await conclaveConfig.functions.call( \"function name\", \"function hash\", [args] ); The [args] value is the input value from the project. It should look like this: response = await conclaveConfig.functions.call( \"sayHello\", \"60C5AEFCE46A44163467EC82C204AB5207B780A45527A65A6580886AECAC49D4\", [input] ); You can now invoke the function from the UI. 4. Fixing Breaking Changes with create-react-app Due to create-react-app using Webpack 5+, you will experience some breaking changes due to polyfills not being included. Below are options to use in your project to include polyfills, either by downgrading to Webpack 4.*or by manually including polyfills: Downgrading react-scripts: Run the following commands: npm uninstall react-scripts npm install react-scripts@4.0.3 Adding a Webpack config file with fallback: In the root project directory, create the file webpack.config.js. Add the following to webpack.config.js: module.exports = { resolve: { fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), }, }, }; Run the following command. npm install crypto-browserify stream-browserify --save Adding fallback to react-script's webpack configuration file: After the initial npm install, navigate to node_modules/react-scripts/config/webpack.config.js and find the module.exports section. In the module.exports section, find the resolve section, and add the following: fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } The section should look like this: module.exports = function (webpackEnv) { ... return { ... resolve: { ... fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } } } } Using react-app-rewired: Run the following command: npm install react-app-rewired In the root project directory, create a file config-overrides.js Add the following code to the config-overrides.js file: module.exports = function override(config) { const fallback = config.resolve.fallback || {}; Object.assign(fallback, { \"stream\": require.resolve(\"stream-browserify\"), \"crypto\": require.resolve(\"crypto-browserify\") }); config.resolve.fallback = fallback; return config; }; Run the following command: npm install crypto-browserify stream-browserify --save In package.json, substitute the start scripts with the following lines: \"scripts\": { \"start\": \"react-app-rewired start\", Run the following command: npm start","title":"Tutorial - Invoking your function using Conclave Cloud JS SDK"},{"location":"invoking-your-first-function-with-js-sdk/#invoking-a-conclave-function-using-the-conclave-cloud-javascript-sdk","text":"This tutorial details how to invoke a simple JavaScript function using the React framework and the Conclave Cloud JavaScript SDK. It uses the Hello Conclave Cloud project from the Conclave Cloud samples repo . After completing this tutorial, you will be able to invoke a Conclave Cloud function from the project UI.","title":"Invoking a Conclave Function using the Conclave Cloud JavaScript SDK"},{"location":"invoking-your-first-function-with-js-sdk/#prerequisites","text":"To follow this tutorial, you should already have done the following: Sign-up for a Conclave Cloud account and log in to the portal. Download and install the ccl tool as per the instructions here . Upload the simple.js function to Conclave Cloud as per the instructions here .","title":"Prerequisites"},{"location":"invoking-your-first-function-with-js-sdk/#1-run-the-hello-conclave-cloud-project","text":"Get the Hello Conclave Cloud Tutorial repository: git clone https://github.com/R3Conclave/conclave-cloud-samples.git Change to the hello-conclave-cloud-tutorial directory. Install and run the project: npm install npm start This is the base UI set-up for the sayHello function call. The SDK is yet to be configured.","title":"1. Run the Hello Conclave Cloud project"},{"location":"invoking-your-first-function-with-js-sdk/#2-install-and-configure-the-conclave-cloud-sdk","text":"Install the conclave-cloud-sdk npm package: npm install /path to file/conclave-cloud-sdk-1.0.0-beta2.tgz --save In the project's root directory, create a new file and call it ConclaveCloud.js . Add the following configurations: ConclaveCloud.ts import { Conclave } from 'conclave-cloud-sdk' const accessToken: ()=>Promise<String>=...; const conclaveConfig = new Conclave.create({ projectUid: 'projectUid', accessToken }); export default conclaveConfig; Note : You need to create a function that returns an accessToken. UIDs can be found in a selected project's dashboard screen in ( Conclave Cloud Beta ) or by running the following CLI command: ccl projects list This project was built using create-react-app, which due to webpack 5, has breaking changes. The project has already been set up to use react-app-rewired to bypass the errors. To learn more about breaking changes and the options to bypass, you can read this section .","title":"2. Install and configure the Conclave Cloud SDK"},{"location":"invoking-your-first-function-with-js-sdk/#3-invoke-call-via-sdk","text":"Import conclaveConfig into the app.tsx file import conclaveConfig from \"./ConclaveCloud\"; Add the following to the sendMessage function: response = await conclaveConfig.functions.call( \"function name\", \"function hash\", [args] ); The [args] value is the input value from the project. It should look like this: response = await conclaveConfig.functions.call( \"sayHello\", \"60C5AEFCE46A44163467EC82C204AB5207B780A45527A65A6580886AECAC49D4\", [input] ); You can now invoke the function from the UI.","title":"3. Invoke Call via SDK"},{"location":"invoking-your-first-function-with-js-sdk/#4-fixing-breaking-changes-with-create-react-app","text":"Due to create-react-app using Webpack 5+, you will experience some breaking changes due to polyfills not being included. Below are options to use in your project to include polyfills, either by downgrading to Webpack 4.*or by manually including polyfills:","title":"4. Fixing Breaking Changes with create-react-app"},{"location":"invoking-your-first-function-with-js-sdk/#downgrading-react-scripts","text":"Run the following commands: npm uninstall react-scripts npm install react-scripts@4.0.3","title":"Downgrading react-scripts:"},{"location":"invoking-your-first-function-with-js-sdk/#adding-a-webpack-config-file-with-fallback","text":"In the root project directory, create the file webpack.config.js. Add the following to webpack.config.js: module.exports = { resolve: { fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), }, }, }; Run the following command. npm install crypto-browserify stream-browserify --save","title":"Adding a Webpack config file with fallback:"},{"location":"invoking-your-first-function-with-js-sdk/#adding-fallback-to-react-scripts-webpack-configuration-file","text":"After the initial npm install, navigate to node_modules/react-scripts/config/webpack.config.js and find the module.exports section. In the module.exports section, find the resolve section, and add the following: fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } The section should look like this: module.exports = function (webpackEnv) { ... return { ... resolve: { ... fallback: { crypto: require.resolve('crypto-browserify'), stream: require.resolve('stream-browserify'), } } } }","title":"Adding fallback to react-script's webpack configuration file:"},{"location":"invoking-your-first-function-with-js-sdk/#using-react-app-rewired","text":"Run the following command: npm install react-app-rewired In the root project directory, create a file config-overrides.js Add the following code to the config-overrides.js file: module.exports = function override(config) { const fallback = config.resolve.fallback || {}; Object.assign(fallback, { \"stream\": require.resolve(\"stream-browserify\"), \"crypto\": require.resolve(\"crypto-browserify\") }); config.resolve.fallback = fallback; return config; }; Run the following command: npm install crypto-browserify stream-browserify --save In package.json, substitute the start scripts with the following lines: \"scripts\": { \"start\": \"react-app-rewired start\", Run the following command: npm start","title":"Using react-app-rewired:"},{"location":"javascript-in-conclave-functions/","text":"Using JavaScript in Conclave Functions Conclave Functions provides a powerful ES6 JavaScript engine to execute your function code. JavaScript Engine Conclave Functions provides a pure JavaScript engine. It does not offer full support for environments like Node.js (yet). Without importing libraries, you do not have access to Node.js built-ins such as file support or Buffer . However, you can create a project using npm and import standard packages to fill in the gaps. The ConclavePass sample uses this technique, implementing an npm component that compiles to a single JavaScript file for upload, importing a cryptographic library, buffer, and other useful tools. In addition, the Conclave Cloud ccl tool provides a command to bootstrap a new JavaScript or TypeScript project that supports multiple code modules and packages and packs them into a single JavaScript file for uploading to Conclave Functions. You can read how to use this to create your function module here .","title":"Overview"},{"location":"javascript-in-conclave-functions/#using-javascript-in-conclave-functions","text":"Conclave Functions provides a powerful ES6 JavaScript engine to execute your function code.","title":"Using JavaScript in Conclave Functions"},{"location":"javascript-in-conclave-functions/#javascript-engine","text":"Conclave Functions provides a pure JavaScript engine. It does not offer full support for environments like Node.js (yet). Without importing libraries, you do not have access to Node.js built-ins such as file support or Buffer . However, you can create a project using npm and import standard packages to fill in the gaps. The ConclavePass sample uses this technique, implementing an npm component that compiles to a single JavaScript file for upload, importing a cryptographic library, buffer, and other useful tools. In addition, the Conclave Cloud ccl tool provides a command to bootstrap a new JavaScript or TypeScript project that supports multiple code modules and packages and packs them into a single JavaScript file for uploading to Conclave Functions. You can read how to use this to create your function module here .","title":"JavaScript Engine"},{"location":"releases/","text":"Conclave Cloud Tools and SDKs You can interact with Conclave Cloud using the Conclave Cloud Command Line Interface ( ccl ) as well as client SDKs for Java/Kotlin and JavaScript. This page provides information and download links for each tool's current version and information and downloads for previous versions. 1.0.0-GA - Current Version Changes This release coincides with the update of the Conclave Cloud platform to the first 1.0.0 production release. The changes include: Introduction of paid usage plans in the platform along with tools to query usage against the plan. Update tools and services to use the latest Conclave V1.3 core. Download Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Command Line tool for Windows The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License 1.0.0-beta2 Changes The Conclave Cloud platform introduced breaking changes as part of the Beta development process. Please ensure you download the current version of each tool and SDK to ensure compatibility with the platform. The changes include: Improvements to the Conclave Cloud REST interface defined here . Use of API keys to control access to Conclave Functions invocations. Internal platform hardening and preparation for General Availability (GA). Download Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Command Line tool for Windows The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License 1.0.0-beta1 Changes This was the initial public version. Download Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Command Line tool for Windows The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License","title":"Tools and SDKs"},{"location":"releases/#conclave-cloud-tools-and-sdks","text":"You can interact with Conclave Cloud using the Conclave Cloud Command Line Interface ( ccl ) as well as client SDKs for Java/Kotlin and JavaScript. This page provides information and download links for each tool's current version and information and downloads for previous versions.","title":"Conclave Cloud Tools and SDKs"},{"location":"releases/#100-ga-current-version","text":"","title":"1.0.0-GA - Current Version"},{"location":"releases/#changes","text":"This release coincides with the update of the Conclave Cloud platform to the first 1.0.0 production release. The changes include: Introduction of paid usage plans in the platform along with tools to query usage against the plan. Update tools and services to use the latest Conclave V1.3 core.","title":"Changes"},{"location":"releases/#download","text":"Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Command Line tool for Windows The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License","title":"Download"},{"location":"releases/#100-beta2","text":"","title":"1.0.0-beta2"},{"location":"releases/#changes_1","text":"The Conclave Cloud platform introduced breaking changes as part of the Beta development process. Please ensure you download the current version of each tool and SDK to ensure compatibility with the platform. The changes include: Improvements to the Conclave Cloud REST interface defined here . Use of API keys to control access to Conclave Functions invocations. Internal platform hardening and preparation for General Availability (GA).","title":"Changes"},{"location":"releases/#download_1","text":"Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Command Line tool for Windows The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License","title":"Download"},{"location":"releases/#100-beta1","text":"","title":"1.0.0-beta1"},{"location":"releases/#changes_2","text":"This was the initial public version.","title":"Changes"},{"location":"releases/#download_2","text":"Tool/SDK Description Copyright Notice License Command Line tool for Linux or macOS The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Command Line tool for Windows The ccl tool can be used from the terminal to manage your Conclave Cloud projects and services. Copyright License Conclave Cloud JavaScript Client SDK The JavaScript Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your TypeScript/JavaScript applications. Copyright License Conclave Cloud Java/Kotlin Client SDK The Java/Kotlin Client SDK that allows you to interact with Conclave Cloud and invoke Conclave Functions from your Java or Kotlin applications. Copyright License","title":"Download"},{"location":"what-is-conclave-cloud/","text":"What is Conclave Cloud? Conclave Cloud is a platform for hosting privacy-preserving applications. It's built on top of the Conclave SDK , which is based on Intel Software Guard Extensions ( Intel SGX ). The Conclave Cloud platform provides all the tools necessary to ensure that only authorized parties gain access to data. Conclave Functions The current platform delivers our first service, Conclave Functions, which is a serverless execution environment, much like AWS Lambda or Azure Cloud Functions. Conclave Functions differs from similar services by using end-to-end encryption between the end-user and the container that runs the function. Conclave Cloud provides this data-in-use encryption using a secure Conclave enclave to run the code. Along with protecting the integrity and privacy of the user's data, enclaves provide hardware-backed assurances over the exact code that processes the data. You can deploy and host your code to the Conclave Cloud platform with Conclave Functions. You can call your functions once a year, once an hour, or thousands of times an hour. The platform will cope with the demand and scale accordingly with no management or intervention from you. What can you do with Conclave Cloud/Functions? Conclave Functions allows you to write code that will run inside an enclave with absolutely no boilerplate . This means that you can focus on business logic without worrying about how to transfer data to and from the enclave, how to encrypt data, or how to ensure platform integrity. You can provide cryptographic evidence to your users that the code you claim to process their data is actually the code that processes them. You can also prove that as a service host or author, you do not have access to the keys that encrypt the user's data. In fact, you can prove that nobody except the Conclave Functions enclave can access the data , including R3 and Azure: our cloud service provider. One thing to remember is that Conclave Functions are stateless. Every time you invoke your function in the Conclave Functions service, any previous state is likely to be lost. There is a chance that the previous state is available in memory, but you cannot rely on it - the best you can do is use any previous state as a cache that can be used if present. Stateless functions have limited use. Conclave Functions provides an alternative to storing state directly. It supports a subset of the JavaScript fetch() API, allowing outgoing calls to external services. This means that a function can retrieve and set data using an external service. You must ensure that private data is not leaked by the external call, as the actual call takes place outside the enclave. What problems can you solve with Conclave Functions? You can use Conclave Functions to provide solutions or enhance the privacy for different types of applications, including: Pure data protection products such as cloud-based file storage with secure file sharing. Zero-knowledge proof applications, such as proving identity or age, without providing the actual data to the verifying party. Multiparty computation, where data is collated from multiple parties and derived into a combined result without divulging the shared data with any other party or service. Private set intersection applications, such as allowing different institutions to find common data between their private datasets and the data of other parties. Conclave Cloud provides a sample showing how to implement a password manager using Conclave Functions, a web-based frontend, a Kotlin-based CLI tool, and a Spring backend for persistence. You can find the sample in this GitHub repository . Future plans of the Conclave Cloud platform The Conclave Cloud platform will bring together an expanding set of services that seamlessly integrate with each other, providing a rich set of tools for implementing solutions without ever having to leave the Conclave Cloud platform. You can let us know which services we should prioritize through this feedback form .","title":"What is Conclave Cloud?"},{"location":"what-is-conclave-cloud/#what-is-conclave-cloud","text":"Conclave Cloud is a platform for hosting privacy-preserving applications. It's built on top of the Conclave SDK , which is based on Intel Software Guard Extensions ( Intel SGX ). The Conclave Cloud platform provides all the tools necessary to ensure that only authorized parties gain access to data.","title":"What is Conclave Cloud?"},{"location":"what-is-conclave-cloud/#conclave-functions","text":"The current platform delivers our first service, Conclave Functions, which is a serverless execution environment, much like AWS Lambda or Azure Cloud Functions. Conclave Functions differs from similar services by using end-to-end encryption between the end-user and the container that runs the function. Conclave Cloud provides this data-in-use encryption using a secure Conclave enclave to run the code. Along with protecting the integrity and privacy of the user's data, enclaves provide hardware-backed assurances over the exact code that processes the data. You can deploy and host your code to the Conclave Cloud platform with Conclave Functions. You can call your functions once a year, once an hour, or thousands of times an hour. The platform will cope with the demand and scale accordingly with no management or intervention from you.","title":"Conclave Functions"},{"location":"what-is-conclave-cloud/#what-can-you-do-with-conclave-cloudfunctions","text":"Conclave Functions allows you to write code that will run inside an enclave with absolutely no boilerplate . This means that you can focus on business logic without worrying about how to transfer data to and from the enclave, how to encrypt data, or how to ensure platform integrity. You can provide cryptographic evidence to your users that the code you claim to process their data is actually the code that processes them. You can also prove that as a service host or author, you do not have access to the keys that encrypt the user's data. In fact, you can prove that nobody except the Conclave Functions enclave can access the data , including R3 and Azure: our cloud service provider. One thing to remember is that Conclave Functions are stateless. Every time you invoke your function in the Conclave Functions service, any previous state is likely to be lost. There is a chance that the previous state is available in memory, but you cannot rely on it - the best you can do is use any previous state as a cache that can be used if present. Stateless functions have limited use. Conclave Functions provides an alternative to storing state directly. It supports a subset of the JavaScript fetch() API, allowing outgoing calls to external services. This means that a function can retrieve and set data using an external service. You must ensure that private data is not leaked by the external call, as the actual call takes place outside the enclave.","title":"What can you do with Conclave Cloud/Functions?"},{"location":"what-is-conclave-cloud/#what-problems-can-you-solve-with-conclave-functions","text":"You can use Conclave Functions to provide solutions or enhance the privacy for different types of applications, including: Pure data protection products such as cloud-based file storage with secure file sharing. Zero-knowledge proof applications, such as proving identity or age, without providing the actual data to the verifying party. Multiparty computation, where data is collated from multiple parties and derived into a combined result without divulging the shared data with any other party or service. Private set intersection applications, such as allowing different institutions to find common data between their private datasets and the data of other parties. Conclave Cloud provides a sample showing how to implement a password manager using Conclave Functions, a web-based frontend, a Kotlin-based CLI tool, and a Spring backend for persistence. You can find the sample in this GitHub repository .","title":"What problems can you solve with Conclave Functions?"},{"location":"what-is-conclave-cloud/#future-plans-of-the-conclave-cloud-platform","text":"The Conclave Cloud platform will bring together an expanding set of services that seamlessly integrate with each other, providing a rich set of tools for implementing solutions without ever having to leave the Conclave Cloud platform. You can let us know which services we should prioritize through this feedback form .","title":"Future plans of the Conclave Cloud platform"}]}